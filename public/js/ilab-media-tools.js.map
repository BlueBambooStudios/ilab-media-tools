{"version":3,"sources":["../vendor/cropper/dist/cropper.js","ilab-crop.js","components/imgix-component.js","components/imgix-label.js","components/imgix-slider.js","components/imgix-color.js","components/imgix-alignment.js","components/imgix-media-chooser.js","components/imgix-pillbox.js","ilab-imgix-presets.js","ilab-sidebar-tabs.js","ilab-imgix.js"],"names":[],"mappings":"AAUA,YACA,mCACA,AACA,IACA,qBACA,AACA,mCACA,AACA,AACA,aACA,AACA,qBACA,AACA,CACA,AACA,AACA,0BAmFA,4BACA,QACA,AACA,cACA,OACA,qBACA,AACA,gBACA,IACA,AACA,AACA,YACA,SACA,AACA,AACA,gBACA,UACA,AACA,AACA,gBACA,mBACA,AACA,oBACA,6BACA,YACA,CACA,AACA,cACA,eACA,AACA,6CACA,cACA,mBACA,mBACA,AACA,KACA,AACA,cACA,+BACA,AACA,4CACA,MACA,AACA,cACA,iCACA,EACA,AACA,gBACA,IACA,AACA,AACA,0BACA,uBACA,AACA,AACA,AACA,6CACA,AACA,0BACA,mBACA,OACA,AACA,UACA,IACA,AACA,cACA,IACA,UACA,WACA,WACA,AACA,AACA,oBACA,8BACA,AACA,AACA,KACA,yBACA,AACA,AACA,6BACA,MACA,AACA,gBACA,IAQA,GACA,AACA,AACA,iBAVA,uBACA,MACA,QACA,UACA,UACA,WACA,6BAQA,OACA,AACA,AACA,YANA,UACA,AACA,KAKA,CACA,QACA,AACA,SACA,AACA,gBACA,IAeA,GACA,EACA,AACA,AACA,kBAlBA,kBACA,QACA,IACA,MACA,iBACA,kBACA,WACA,WACA,6BACA,eACA,QACA,eACA,aACA,GAiDA,eA3CA,MACA,AACA,AACA,AACA,WACA,CACA,QACA,SACA,AACA,AACA,eACA,UACA,WACA,MACA,AACA,AACA,KACA,UACA,AACA,AACA,kBACA,OACA,AACA,IACA,SACA,AACA,AACA,AACA,AACA,qBACA,AACA,AACA,AACA,2BACA,AACA,AACA,qCACA,AACA,AACA,YACA,AACA,AACA,WAEA,AACA,cACA,SACA,SACA,IACA,AACA,AACA,mCACA,MACA,WACA,KACA,AACA,GACA,KACA,AACA,AACA,MACA,CACA,QACA,AACA,QACA,AACA,kBACA,IAEA,AACA,KAFA,oBAGA,YACA,AACA,AACA,aACA,QACA,AACA,cACA,IAGA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,AACA,AACA,IAbA,aACA,mCAaA,0BACA,AACA,OACA,+CACA,CACA,IACA,KACA,AACA,CACA,GACA,AACA,AACA,AACA,CAoBA,WAnBA,MACA,AACA,GACA,wBACA,eACA,AACA,cACA,+BACA,uBACA,AACA,KACA,SACA,AACA,AACA,AACA,AACA,AACA,AACA,kBAEA,AACA,uBACA,gBACA,AACA,yBACA,AACA,AACA,IACA,AACA,AACA,MACA,AACA,AACA,AACA,iCACA,AACA,AACA,KACA,KACA,AACA,AACA,AACA,CACA,QACA,AACA,cACA,IAMA,AACA,iBANA,MACA,YACA,SACA,WACA,qBAGA,WACA,AACA,AACA,cACA,QACA,AACA,AACA,cACA,IAIA,AACA,KAJA,aACA,SACA,eAGA,UACA,AACA,AACA,sCACA,IACA,AACA,gBACA,eACA,2CACA,0BACA,iBACA,gBACA,oBACA,kBACA,kBACA,mBACA,mBACA,kBACA,iBACA,0BACA,eACA,kBACA,UACA,MACA,AACA,mBA3ZA,YACA,mBACA,kBACA,mBACA,qBACA,oBACA,kBACA,AACA,AACA,OACA,AACA,AACA,YACA,kBACA,iBACA,mBAEA,iBACA,iBACA,qBAIA,mDACA,kDACA,qFACA,oCACA,aACA,YACA,aACA,cACA,aACA,aACA,iBACA,gBACA,eACA,YACA,AACA,AACA,YACA,2CACA,YACA,6BACA,AACA,AACA,iCACA,aACA,AACA,AACA,YACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,UACA,UACA,wCAIA,sEACA,AACA,AACA,cACA,eACA,YACA,YACA,YACA,YACA,YACA,aACA,cACA,AACA,AACA,gBACA,AACA,yBA2UA,CACA,AACA,6BACA,IAEA,AACA,UAFA,wBAGA,SACA,AACA,AACA,mCACA,AACA,AACA,OACA,GACA,AACA,AACA,AACA,gBACA,iBACA,uBACA,AACA,AACA,kBACA,OACA,AACA,AACA,uBACA,SACA,AACA,WAGA,qBAFA,AACA,YAEA,AACA,kBACA,IAGA,GACA,AACA,SAJA,eACA,SAIA,AACA,AACA,AACA,AACA,sBACA,AACA,wBACA,AACA,AACA,AACA,4BACA,WACA,AACA,8BACA,SACA,AACA,AACA,6BACA,AACA,AACA,QACA,UACA,UACA,WACA,AACA,AACA,kBACA,AACA,sDACA,MACA,SACA,AACA,yBACA,QACA,SACA,AACA,mCACA,mBACA,AACA,AACA,aACA,wBACA,gBACA,eACA,AACA,kBACA,IAIA,GACA,EACA,AACA,SANA,UACA,YACA,MAKA,eACA,AACA,AACA,AACA,AACA,KACA,SACA,AACA,AACA,AACA,EACA,SACA,AACA,AACA,AACA,IACA,SACA,AACA,AACA,AACA,EACA,SACA,MACA,AACA,AACA,AACA,GACA,QACA,AACA,AACA,AACA,GACA,SACA,MACA,AACA,AACA,AACA,GACA,SACA,AACA,AACA,AACA,AACA,aACA,cACA,AACA,AACA,YACA,aACA,WACA,AACA,AACA,eACA,OACA,AACA,kBACA,IAKA,GACA,AACA,SANA,eACA,gBACA,MACA,uBAIA,gBACA,AACA,AACA,iBACA,AACA,OACA,AACA,AACA,cACA,AACA,AACA,AACA,YACA,mBACA,6DACA,AACA,WACA,WACA,cACA,AACA,mCACA,AACA,AACA,OACA,2BACA,+BACA,OACA,YACA,AACA,cACA,AACA,kBACA,YACA,gBACA,AACA,YACA,qBACA,MACA,AACA,AACA,iCACA,qBACA,CACA,eACA,4BACA,AACA,AACA,WACA,iBACA,SACA,MACA,AACA,iBACA,aACA,qBACA,IACA,AACA,kBACA,IAIA,GACA,EACA,AACA,SANA,eACA,gBACA,YAKA,AACA,AACA,AACA,AACA,gBACA,cACA,AACA,AACA,AACA,4BACA,6BACA,iDACA,+BACA,4CACA,0CACA,yCACA,AACA,AACA,+BACA,AACA,AACA,eACA,SACA,AACA,AACA,oBACA,mBACA,AACA,0CACA,2CACA,AACA,IACA,eACA,AACA,eACA,qBACA,AACA,AACA,eACA,AACA,AACA,eACA,kCACA,AACA,AACA,eACA,kCACA,AACA,AACA,cACA,8BACA,AACA,AACA,eACA,aACA,AACA,AACA,SAvqBA,uBAwqBA,cACA,AACA,AACA,SAvqBA,AACA,AACA,iBAsqBA,0DACA,AACA,AACA,+BACA,eACA,cACA,0BACA,gBACA,AACA,AACA,oCACA,MACA,+BACA,gBACA,sBACA,GACA,AACA,oBACA,MACA,AACA,AACA,AACA,eACA,gBACA,iCACA,AACA,AACA,wBACA,yBACA,oBACA,iBACA,AACA,AACA,kBACA,UACA,AACA,cACA,6BACA,AACA,mBACA,mBACA,mBACA,kBACA,qBACA,AACA,mBACA,uBACA,KACA,AACA,mBACA,MACA,qBACA,kBACA,AACA,mBACA,AACA,oBACA,gBACA,AACA,eACA,AACA,0BACA,YACA,eACA,gBACA,kBACA,AACA,WACA,cACA,AACA,oCACA,6CACA,oDACA,AACA,AACA,SACA,cACA,cACA,AACA,AACA,uBACA,IAcA,AACA,kBAdA,gBACA,cACA,UACA,cACA,UACA,iBACA,gBACA,oBACA,QACA,QACA,IACA,IACA,IAGA,MACA,QACA,AACA,MACA,AACA,AACA,IACA,QACA,AACA,MACA,AACA,AACA,AACA,MACA,CACA,eACA,gBACA,cACA,QACA,AACA,AACA,iCACA,uBACA,AACA,OACA,+BACA,WACA,uCACA,kCACA,YACA,AACA,2BACA,IAUA,GACA,EACA,EACA,AACA,AACA,SAdA,YACA,gBACA,cACA,UACA,cACA,WACA,mBACA,eACA,yCAOA,2BACA,AACA,AACA,MACA,OACA,UACA,AACA,QACA,QACA,QACA,AACA,MACA,AACA,AACA,AACA,AACA,yBACA,AACA,uBACA,AACA,WACA,UACA,AACA,OACA,QACA,AACA,MACA,AACA,AACA,AACA,AACA,AACA,MACA,KACA,QACA,AACA,MACA,AACA,AACA,QACA,AACA,UACA,AACA,AACA,OACA,aACA,uBACA,qBACA,AACA,AACA,AACA,AACA,uBACA,YACA,AACA,oBACA,iBACA,kBACA,iBACA,AACA,aACA,sBACA,KACA,sBACA,AACA,gBACA,KACA,qBACA,AACA,oBACA,gBACA,AACA,IACA,UACA,wBACA,kBACA,AACA,AACA,QACA,wBACA,iBACA,AACA,AACA,AACA,AACA,uBACA,kBACA,SACA,YACA,AACA,AACA,UACA,AACA,0BACA,IAMA,GACA,AACA,SAPA,cACA,UACA,WACA,iBACA,mBAIA,iBACA,AACA,AACA,iBACA,SACA,eACA,OACA,AACA,AACA,uBACA,AACA,aACA,wCACA,6BACA,YACA,iBACA,SACA,gBACA,iBACA,AACA,AACA,kBACA,UACA,CACA,QACA,SACA,AACA,AACA,4BACA,wBACA,AACA,AACA,aACA,AACA,AACA,AACA,oDACA,qBACA,AACA,AACA,2CACA,qBACA,AACA,AACA,4CACA,iDACA,AACA,gBACA,AACA,8DACA,gDACA,AACA,yBACA,SACA,eACA,cACA,WACA,AACA,AACA,WACA,AACA,mCACA,gBACA,AACA,AACA,AACA,4BACA,AACA,QACA,AACA,yBACA,IAGA,AACA,UAHA,cACA,QAGA,aACA,SACA,eACA,gBACA,qBACA,AACA,AACA,AACA,+BACA,SACA,eACA,8BACA,0BACA,GACA,SACA,eACA,YACA,MACA,AACA,AACA,oBACA,SACA,eACA,oBACA,iBACA,cACA,AACA,AACA,AACA,eACA,AACA,QACA,AACA,wBACA,YACA,eACA,WACA,kCACA,MACA,SACA,eACA,AACA,AACA,AACA,yBACA,iBACA,AACA,kBACA,AACA,AACA,AACA,eACA,eACA,AACA,AACA,wDACA,iDACA,AACA,AACA,mCACA,mCACA,oDACA,2CACA,AACA,wBACA,YACA,AACA,4BACA,IASA,GACA,EACA,EACA,AACA,AACA,SAbA,YACA,mBACA,cACA,UACA,cACA,cACA,eACA,uCAOA,4BACA,AACA,AACA,IACA,UACA,mBACA,oBACA,AACA,AACA,cACA,KACA,QACA,AACA,MACA,AACA,AACA,QACA,AACA,UACA,AACA,AACA,KACA,QACA,AACA,MACA,AACA,AACA,AACA,AACA,gBACA,oBACA,UACA,aACA,AACA,AACA,AACA,AACA,qCACA,sBACA,sCACA,sCACA,AACA,mBACA,WACA,gBACA,mBACA,AACA,AACA,QACA,AACA,0BACA,YACA,eACA,cACA,UACA,cACA,AACA,uCACA,qBACA,AACA,AACA,2CACA,qBACA,AACA,AACA,4CACA,iDACA,AACA,gBACA,AACA,+DACA,gDACA,AACA,qBACA,AACA,AACA,kDACA,AACA,AACA,oCACA,SACA,eACA,cACA,WACA,AACA,AACA,2BACA,gBACA,AACA,AACA,wBACA,iBACA,AACA,QACA,AACA,mBACA,MACA,AACA,eACA,iCACA,AACA,UACA,AACA,wBACA,IAGA,AACA,YAHA,0CACA,iCAGA,8CACA,oBACA,qCACA,SACA,AACA,AACA,eACA,SACA,iBACA,gBACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,WACA,cACA,AACA,AACA,AACA,AACA,AACA,+LACA,EACA,AACA,yBACA,8BACA,SACA,UACA,AACA,cACA,SACA,eACA,sBACA,aACA,EACA,AACA,oBACA,YACA,aACA,cACA,YACA,UACA,WACA,UACA,yBACA,qBACA,AACA,0BACA,AACA,AACA,AACA,8BACA,CACA,QACA,oBACA,aACA,aACA,AACA,AACA,oCACA,SACA,UACA,YACA,UACA,OACA,IACA,MACA,AACA,AACA,QACA,MACA,AACA,AACA,QACA,QACA,MACA,IACA,AACA,AACA,WACA,CACA,QACA,2BACA,OACA,WACA,eACA,eACA,eACA,AACA,MACA,GACA,AACA,iBACA,YACA,eACA,gBACA,AACA,wBACA,qBACA,AACA,AACA,0BACA,oBACA,AACA,AACA,yBACA,mBACA,AACA,AACA,wBACA,gBACA,AACA,AACA,qBACA,gBACA,AACA,AACA,oCACA,AACA,qBACA,uCACA,AACA,AACA,SACA,uDACA,AACA,AACA,OACA,sCACA,yCACA,AACA,SACA,8CACA,AACA,MACA,AACA,mBACA,YACA,eACA,gBACA,AACA,wBACA,sBACA,AACA,AACA,0BACA,qBACA,AACA,AACA,yBACA,oBACA,AACA,AACA,wBACA,iBACA,AACA,AACA,qBACA,iBACA,AACA,AACA,mBACA,AACA,yBACA,0BACA,AACA,AACA,SACA,uCACA,AACA,AACA,UACA,aACA,sBACA,AACA,YACA,yBACA,AACA,QACA,AACA,mBACA,IAIA,GACA,EACA,AACA,AACA,iBAPA,eACA,kBACA,2BAMA,AACA,AACA,AACA,mBACA,AACA,AACA,6BACA,AACA,qBACA,uBACA,AACA,AACA,uBACA,AACA,AACA,sDACA,MACA,GACA,8CACA,MACA,GACA,AACA,AACA,MACA,AACA,qBACA,MACA,AACA,AACA,AACA,2BACA,iBACA,AACA,qBACA,AACA,gBACA,AACA,mBACA,SACA,oDACA,MACA,AACA,OACA,AACA,AACA,AACA,eACA,AACA,AACA,sBACA,AACA,AACA,AACA,gBACA,AACA,yCACA,MACA,mBACA,AACA,MACA,uBACA,IACA,2BACA,MACA,yBACA,AACA,AACA,aACA,SACA,AACA,uBACA,IAKA,GACA,AACA,SANA,YACA,qBACA,QACA,aAIA,AACA,AACA,AACA,iBACA,QACA,AACA,OACA,kCACA,UACA,kBACA,qBACA,MACA,AACA,SACA,AACA,AACA,AACA,YACA,EACA,AACA,qBACA,AACA,mBACA,mBACA,CACA,gBACA,WACA,qBACA,AACA,AACA,SACA,AACA,sBACA,cACA,AACA,AACA,AACA,sCACA,gCACA,AACA,MACA,cACA,0BACA,AACA,YACA,EACA,AACA,sBACA,IAMA,AACA,UANA,YACA,qBACA,QACA,WACA,gBAGA,AACA,AACA,AACA,iBACA,QACA,AACA,OACA,kCACA,UACA,gBACA,mBACA,AACA,UACA,AACA,AACA,AACA,YACA,EACA,AACA,MACA,mBACA,CACA,gBACA,WACA,qBACA,AACA,AACA,SACA,AACA,yCACA,8BACA,AACA,sCACA,KACA,EACA,AACA,qBACA,SACA,qBACA,AACA,YACA,AACA,AACA,AACA,AACA,kBACA,AACA,sBACA,gBACA,qEACA,AACA,AACA,oBACA,AACA,kBACA,CACA,gBACA,AACA,AACA,WACA,AACA,sBACA,IAkBA,GACA,AACA,AACA,SApBA,YACA,mBACA,cACA,iBACA,cACA,YACA,UACA,WACA,SACA,MACA,MACA,MACA,IACA,MACA,UACA,OACA,KA0BA,AACA,OAtBA,mBACA,AACA,AACA,QACA,gBACA,YACA,+BACA,+BACA,AACA,AACA,WACA,kBACA,wBACA,AACA,AACA,AACA,kBACA,UACA,AACA,AACA,QAGA,aACA,OACA,EACA,AACA,AACA,MACA,0BACA,iBACA,AACA,CACA,KACA,KACA,AACA,MACA,AACA,AACA,QACA,WACA,AACA,AACA,GACA,MACA,OACA,AACA,AACA,GACA,AACA,MACA,0BACA,iBACA,AACA,CACA,KACA,KACA,AACA,MACA,OACA,AACA,AACA,QACA,WACA,AACA,AACA,GACA,MACA,OACA,AACA,AACA,GACA,AACA,MACA,0BACA,iBACA,AACA,CACA,KACA,KACA,AACA,MACA,OACA,AACA,AACA,QACA,WACA,AACA,AACA,GACA,MACA,OACA,AACA,AACA,GACA,AACA,MACA,0BACA,iBACA,AACA,CACA,KACA,KACA,AACA,MACA,AACA,AACA,QACA,WACA,AACA,AACA,GACA,MACA,OACA,AACA,AACA,GACA,AACA,MACA,aACA,yBACA,CACA,KACA,KACA,AACA,MACA,OACA,IACA,GACA,KACA,QACA,SACA,UACA,OACA,AACA,AACA,WACA,AACA,AACA,EACA,OACA,WACA,OACA,AACA,AACA,SACA,OACA,AACA,AACA,AACA,QACA,KACA,OACA,IACA,GACA,KACA,OACA,GACA,MACA,OACA,AACA,AACA,GACA,AACA,MACA,aACA,yBACA,CACA,KACA,KACA,AACA,MACA,OACA,IACA,SACA,CACA,KACA,QACA,UACA,OACA,WACA,OACA,AACA,AACA,YACA,OACA,AACA,AACA,GACA,OACA,WACA,OACA,AACA,AACA,SACA,OACA,AACA,AACA,AACA,QACA,KACA,OACA,IACA,GACA,KACA,OACA,GACA,MACA,OACA,AACA,AACA,GACA,AACA,MACA,aACA,yBACA,CACA,KACA,KACA,AACA,MACA,OACA,IACA,GACA,KACA,QACA,UACA,OACA,WACA,OACA,AACA,AACA,YACA,OACA,AACA,AACA,GACA,OACA,WACA,AACA,AACA,QACA,AACA,AACA,AACA,OACA,KACA,OACA,IACA,GACA,KACA,OACA,GACA,MACA,OACA,AACA,AACA,GACA,AACA,MACA,aACA,yBACA,CACA,KACA,KACA,AACA,MACA,IACA,GACA,KACA,QACA,SACA,UACA,OACA,AACA,AACA,WACA,AACA,AACA,EACA,OACA,WACA,AACA,AACA,QACA,AACA,AACA,AACA,OACA,KACA,OACA,IACA,GACA,KACA,OACA,GACA,MACA,OACA,AACA,AACA,GACA,AACA,AACA,MACA,wBACA,GACA,KACA,AACA,AACA,MACA,mCACA,cACA,cACA,AACA,YACA,MACA,sBACA,6BACA,2BACA,yBACA,AACA,6BACA,wBACA,MACA,KACA,AACA,AACA,MACA,sBACA,CACA,KACA,KACA,AACA,iBACA,yBACA,qBACA,QACA,aACA,AACA,UACA,QACA,YACA,QACA,OACA,AACA,AACA,aACA,QACA,AACA,AACA,AACA,WACA,0BACA,oBACA,AACA,kBACA,gBACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,4BACA,UACA,WACA,SACA,WACA,AACA,cACA,AACA,AACA,AACA,kCACA,sBACA,IACA,AACA,AACA,iBACA,qBACA,AACA,AACA,AACA,mBACA,iBACA,kBACA,AACA,iCACA,qBACA,AACA,AACA,0BACA,AACA,AACA,yCACA,gBACA,AACA,AACA,kBACA,qBACA,AACA,AACA,AACA,yCACA,2CACA,6CACA,AACA,qBACA,AACA,oBACA,gBACA,AACA,gBACA,AACA,AACA,kBACA,uBACA,AACA,AACA,AACA,mCACA,MACA,MACA,QACA,SACA,AACA,AACA,SACA,kBACA,AACA,qBACA,AACA,AACA,wBACA,AACA,6BACA,6BACA,YACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,uBACA,OACA,qBACA,0BACA,AACA,AACA,AACA,iBACA,uBACA,AACA,cACA,0DACA,AACA,AACA,gBACA,aACA,AACA,AACA,AACA,iCACA,UACA,AACA,AACA,SACA,AACA,AACA,mBACA,MACA,eACA,4BACA,AACA,eACA,AACA,AACA,oBACA,MACA,eACA,4BACA,AACA,YACA,AACA,AACA,oBACA,YACA,AACA,cACA,2BACA,8BACA,AACA,AACA,kBACA,YACA,AACA,qBACA,mBACA,YACA,oBACA,AACA,AACA,AACA,WACA,aACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,oBACA,YACA,AACA,YACA,qBACA,mBACA,AACA,MACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,sBACA,YACA,OACA,AACA,AACA,KACA,OACA,AACA,AACA,OACA,QACA,AACA,mDACA,UACA,SACA,OACA,AACA,AACA,MACA,SACA,MACA,AACA,AACA,AACA,cACA,AACA,AACA,iBACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,oBACA,YACA,AACA,SACA,AACA,QACA,OACA,AACA,KACA,AACA,AACA,4BACA,eACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,sBACA,IAOA,GACA,EACA,EACA,EACA,AACA,SAXA,eACA,WACA,UACA,WACA,iBACA,mBAOA,AACA,uDACA,MACA,MACA,AACA,AACA,YACA,AACA,AACA,8BACA,CACA,yBACA,UACA,MACA,qBACA,AACA,AACA,AACA,0BACA,kCACA,yBACA,0BACA,AACA,AACA,AACA,YACA,wBACA,AACA,iBACA,uBACA,AACA,AACA,AACA,AACA,wBACA,eACA,AACA,AACA,KACA,UACA,cACA,gBACA,CACA,AACA,AACA,AACA,AACA,AACA,AACA,oBACA,sCACA,MACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,sBACA,GACA,AACA,yDACA,gCACA,SACA,kBACA,AACA,iBACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,qBACA,YACA,MACA,AACA,AACA,KACA,OACA,AACA,AACA,OACA,QACA,AACA,mDACA,WACA,SACA,SACA,AACA,AACA,MACA,SACA,SACA,AACA,AACA,AACA,cACA,AACA,AACA,gBACA,AACA,AACA,AACA,AACA,AACA,AACA,oBACA,kBACA,AACA,2BACA,EACA,AACA,AACA,AACA,AACA,AACA,AACA,oBACA,kBACA,AACA,yBACA,IACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,qBACA,IAKA,GACA,AACA,SANA,eACA,aACA,cACA,QAqCA,0BAjCA,aACA,YACA,eACA,YACA,eACA,AACA,AACA,oBACA,AACA,mCACA,AACA,aACA,OACA,AACA,AACA,MACA,GACA,IACA,QACA,SACA,AACA,AACA,AACA,KACA,+BACA,AACA,AACA,KACA,8BACA,qBACA,AACA,AACA,IAEA,AACA,AACA,AACA,AACA,AACA,AACA,qBACA,IAKA,GACA,EACA,AACA,SAPA,eACA,aACA,OACA,OAKA,8BACA,AACA,AACA,4CACA,qBACA,qCACA,oBACA,sBACA,AACA,AACA,AACA,QACA,qCACA,oBACA,OACA,AACA,AACA,gCACA,oBACA,OACA,AACA,AACA,AACA,AACA,cACA,AACA,uBACA,AACA,AACA,0BACA,AACA,iBACA,oBACA,AACA,AACA,UACA,mBACA,AACA,AACA,SACA,mBACA,AACA,AACA,aACA,qBACA,AACA,AACA,eACA,AACA,kBACA,AACA,AACA,AACA,AACA,AACA,AACA,6BACA,0BACA,YACA,AACA,AACA,AACA,AACA,AACA,AACA,yBACA,2BACA,QACA,AACA,AACA,AACA,AACA,AACA,AACA,0BACA,YACA,OACA,AACA,KAcA,YAbA,WACA,AACA,AACA,AACA,AACA,AACA,AACA,iFACA,MACA,IACA,AACA,AACA,IAEA,AACA,AACA,AACA,AACA,AACA,AACA,2BACA,YACA,WACA,AACA,cACA,8BACA,AACA,AACA,6CACA,uBACA,iBACA,AACA,AACA,UACA,eACA,AACA,AACA,SACA,kBACA,iBACA,aACA,qBACA,iBACA,AACA,AACA,eACA,AACA,iBACA,AACA,AACA,AACA,AACA,AACA,AACA,2BACA,IAEA,AACA,UAFA,kCAGA,cACA,QACA,WACA,YACA,eACA,AACA,AACA,AACA,SACA,KACA,AACA,AACA,AACA,AACA,AACA,AACA,4BACA,IAGA,GACA,AACA,SAJA,uBACA,cAIA,8BACA,AACA,AACA,6DACA,AACA,uBACA,iBACA,AACA,AACA,UACA,eACA,AACA,AACA,SACA,SACA,eACA,AACA,AACA,WACA,UACA,gBACA,AACA,AACA,AACA,AACA,yBACA,AACA,sBACA,AACA,AACA,AACA,gBACA,AACA,gBACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,8BACA,IACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,AACA,UACA,AACA,AACA,AACA,wBACA,aAIA,mBACA,AACA,AACA,aACA,cACA,UACA,SACA,AACA,MACA,uBACA,UACA,AACA,AACA,YACA,MACA,AACA,WACA,MACA,AACA,AACA,AACA,AACA,WACA,WACA,AACA,sBACA,KACA,UACA,wBACA,AACA,QACA,0BACA,uBACA,AACA,AACA,AACA,sCACA,IAUA,GACA,AACA,AACA,EACA,EACA,EACA,EACA,AACA,0BAjBA,WACA,UACA,cACA,SACA,AACA,AACA,6CACA,4CACA,EAgDA,cAtCA,YACA,EACA,QACA,KACA,WACA,MACA,SACA,WACA,AACA,AACA,mBACA,YACA,EACA,QACA,KACA,WACA,MACA,SACA,WACA,AACA,AACA,AACA,+BACA,AACA,AACA,AACA,WACA,KACA,KACA,KACA,AACA,AACA,AACA,WACA,8BACA,AACA,AACA,eAEA,AACA,AACA,gCApGA,AACA,AACA,MAmGA,AACA,AACA,AACA,AACA,AACA,AACA,4BACA,YACA,AACA,yBACA,AACA,AACA,8BACA,AACA,SACA,eACA,AACA,mBACA,gBACA,AACA,AACA,AACA,iBACA,AACA,AACA,AACA,AACA,AACA,AACA,yBACA,IAEA,GACA,AACA,SAHA,6BAIA,eACA,oBACA,SACA,AACA,OAhqFA,AACA,AACA,YA+pFA,SACA,WACA,iBACA,AACA,oBACA,AACA,AACA,qBACA,MACA,WACA,iBACA,AACA,AACA,iBACA,AACA,AACA,cACA,AACA,AACA,UACA,AACA,AACA,WACA,AACA,AACA,mBACA,AACA,AACA,SACA,AACA,AACA,aACA,AACA,AACA,GACA,AACA,AACA,cACA,AACA,AACA,WACA,AACA,AACA,oBACA,AACA,AACA,oBACA,AACA,AACA,SACA,AACA,AACA,UACA,AACA,AACA,UACA,AACA,AACA,aACA,AACA,AACA,cACA,AACA,AACA,yBACA,AACA,AACA,IACA,AACA,AACA,WACA,AACA,AACA,aACA,AACA,AACA,YACA,AACA,AACA,YACA,AACA,AACA,eACA,AACA,AACA,8BACA,AACA,AACA,IACA,AACA,AACA,kBACA,AACA,AACA,oBACA,AACA,AACA,2CACA,kBACA,kBACA,mBACA,oBACA,uBACA,AACA,AACA,UACA,WACA,eACA,cACA,aACA,UACA,UACA,AACA,AACA,+BACA,YACA,WACA,AACA,IACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,slCACA,AACA,AACA,gCACA,IAEA,AACA,iBAFA,8BAGA,IAGA,GACA,AACA,MAJA,UACA,cAIA,cACA,QACA,AACA,AACA,gCACA,sCACA,QACA,AACA,oCACA,YACA,AACA,WACA,AACA,QACA,MACA,AACA,eACA,yCACA,AACA,AACA,8CACA,uBACA,MACA,IACA,AACA,CACA,ACr7FA,AACA,AACA,AACA,GACA,0BACA,MACA,uDACA,gDACA,uBACA,+BACA,AACA,YAEA,KADA,KAEA,AACA,6DACA,4BACA,4BACA,+CACA,GACA,SACA,EACA,AACA,AACA,+BACA,AACA,AACA,4BACA,uCACA,8BACA,kCACA,uCACA,AACA,AACA,QACA,OACA,qBACA,wCACA,IACA,AACA,AACA,wEACA,CAGA,SAFA,mBACA,SAEA,AACA,2BACA,YACA,UACA,IACA,AACA,oCACA,4DACA,2DACA,kCACA,aACA,AACA,MACA,AACA,yBACA,MACA,AACA,gCACA,4BACA,AACA,kDACA,AACA,sFACA,AACA,AACA,6CACA,AACA,yIACA,AACA,AACA,KACA,AACA,0CACA,AACA,wDACA,wCACA,KACA,gBACA,oBACA,yBACA,AACA,AACA,AACA,6DACA,GACA,mDACA,AACA,YACA,UACA,gBACA,wBACA,sBACA,WACA,SACA,YACA,kBACA,yBACA,EACA,qBACA,YACA,oBACA,oBACA,wDACA,AACA,AACA,wBACA,AACA,sBACA,OACA,AACA,wBACA,AACA,8CACA,oBACA,yCACA,8BACA,sCACA,CACA,qFACA,GACA,YACA,gEACA,AACA,AACA,QACA,YACA,EACA,AACA,gCACA,8CACA,qEACA,YACA,AACA,4BACA,2DACA,YACA,AACA,OACA,SACA,ACjJA,AACA,AACA,AACA,AACA,4BACA,OAMA,WACA,CACA,AACA,AACA,qBATA,IACA,yFACA,KACA,AACA,GCVA,gBACA,AACA,4BACA,SACA,AACA,wCACA,IAGA,AACA,OAHA,AACA,QAGA,AACA,MACA,yFACA,AACA,oCACA,IACA,oBACA,cACA,AACA,oBACA,8BACA,cACA,AACA,aACA,AACA,8BACA,OACA,cACA,AACA,0BACA,kBACA,8BACA,cACA,AACA,aACA,OACA,uBACA,kBACA,OACA,MACA,wBACA,cACA,aACA,OACA,uBACA,kBACA,OACA,MACA,wBACA,cACA,aACA,AACA,OACA,AACA,eACA,AACA,6BACA,AACA,eACA,AACA,oBACA,AACA,AACA,YACA,AACA,AACA,oBACA,AACA,2BACA,CA+BA,SA9BA,AACA,wCACA,kBACA,wBACA,AACA,aACA,uCACA,GACA,YACA,AACA,AACA,QACA,OACA,AACA,yBACA,kBACA,kBACA,8BACA,cACA,AACA,aACA,OACA,AACA,uDACA,IACA,qBACA,eACA,WACA,AACA,UAEA,EACA,EACA,AACA,IACA,AC1GA,AACA,kBACA,6BACA,aACA,MACA,gBACA,mCACA,oDACA,wCACA,AACA,+CACA,mCACA,AACA,eACA,AACA,0DACA,wBACA,iBACA,KACA,qBACA,aACA,AACA,AACA,iBACA,4BACA,cACA,UACA,AACA,AACA,0CACA,GACA,OACA,AACA,oCACA,4BACA,MACA,AACA,qCACA,4BACA,kBACA,SACA,EACA,AACA,0DACA,iBACA,yBACA,+BACA,QACA,AACA,yDACA,IACA,AACA,8BACA,cACA,AACA,YACA,AACA,6BACA,oBACA,+BACA,AACA,iBACA,SACA,AACA,6DACA,CAIA,+BAHA,yCACA,AACA,QAEA,AACA,GACA,ACxEA,kBACA,AACA,YAwEA,iCAvEA,aACA,MACA,gBACA,oCACA,8CACA,uCACA,sCACA,wCACA,kCACA,AACA,uBACA,AACA,iCACA,wBACA,uCACA,AACA,mCACA,gCACA,AACA,8CACA,YACA,SACA,EACA,AACA,gCACA,CACA,6BACA,YACA,SACA,AACA,AACA,2CACA,YACA,SACA,AACA,yCACA,GACA,OACA,EACA,AACA,yDACA,sBACA,UACA,+CACA,AACA,+BACA,QACA,AACA,wDACA,IAEA,AACA,KAFA,4CAGA,AACA,uBACA,AACA,AACA,iDACA,AACA,cACA,AACA,AACA,YACA,AACA,6BACA,IACA,YACA,4CACA,mBACA,AACA,2DAEA,EACA,2BACA,gCACA,AACA,AACA,wBACA,8CACA,AACA,OACA,2CACA,AACA,AACA,qBACA,SACA,AACA,4DACA,CAWA,MAVA,sKACA,AACA,IACA,0BACA,qEACA,AACA,AACA,AACA,AACA,SAEA,AACA,GACA,ACzGA,mBACA,AACA,gCACA,aACA,MACA,gBACA,uCACA,wCACA,+CACA,mCACA,AACA,eACA,AACA,2CACA,GACA,OACA,AACA,0DACA,SACA,iEACA,qBACA,qBACA,AACA,cACA,kDACA,2BACA,SACA,EACA,AACA,6DACA,sBACA,4DACA,QACA,AACA,4DACA,IACA,AACA,8BACA,cACA,AACA,YACA,AACA,aACA,eACA,AACA,4EACA,SACA,aACA,6BACA,AACA,oCACA,qBACA,AACA,uBACA,qBACA,SACA,AACA,gEACA,CAIA,uCAHA,iDACA,AACA,QAEA,GACA,AChEA,kBACA,AACA,mCACA,aACA,MACA,gBACA,gCACA,mDACA,yCACA,+CACA,AACA,+CACA,mCACA,AACA,gCACA,OACA,0BACA,MACA,AACA,oBACA,AACA,AACA,oBACA,AACA,2CACA,GACA,OACA,AACA,uCACA,wDACA,qCACA,oCACA,AACA,gBACA,SACA,AACA,2CACA,CAGA,SAFA,4BACA,SAEA,AACA,EACA,AACA,gEACA,uBACA,2BACA,+BACA,QACA,AACA,+DACA,IACA,AACA,4BACA,AACA,iBACA,uBACA,AACA,AACA,4BACA,AACA,mCACA,AACA,6CACA,AACA,AACA,AACA,kEACA,0CACA,AACA,AACA,2CACA,SACA,AACA,mEACA,uBACA,AACA,MAIA,UAHA,eACA,AACA,WAEA,AACA,GACA,ACpFA,AACA,mBACA,8BACA,aACA,MACA,gBACA,8BACA,kDACA,yBACA,oBACA,AACA,gBACA,AACA,iCACA,SACA,eACA,wDACA,+BACA,CAgBA,SAfA,AACA,iBACA,AACA,sCACA,cACA,AACA,AACA,AACA,mCACA,iBACA,AACA,AACA,6BACA,AACA,YAEA,EACA,EACA,AACA,2DACA,kBACA,QACA,AACA,0DACA,6BACA,qBACA,gBACA,AACA,SACA,oDACA,iBACA,EACA,AACA,mCACA,2BACA,AACA,AACA,0BACA,iBACA,8CACA,gBACA,EACA,AACA,eACA,SACA,AACA,8DACA,IACA,AACA,QACA,KASA,mDARA,CACA,wBACA,OACA,AACA,GACA,kCACA,AACA,OAEA,AACA,GACA,ACjFA,AACA,AACA,AACA,QACA,oCACA,AACA,MACA,iCACA,2DACA,2DACA,0EACA,AACA,oCACA,AACA,0CACA,IACA,AACA,sBAGA,AACA,AACA,kBAJA,6CACA,+DAIA,0CACA,mCACA,AACA,yBACA,aACA,AACA,wEACA,GACA,WACA,AACA,yEACA,GACA,YACA,AACA,2EACA,GACA,cACA,AACA,uBACA,+BACA,AACA,SACA,AACA,8EACA,AACA,AACA,AACA,0EACA,yBACA,kCACA,UACA,AACA,iCACA,0BACA,+CACA,OACA,AACA,iCACA,oDACA,AACA,eACA,AACA,+BACA,oBACA,gCACA,aACA,AACA,qCACA,AACA,gCACA,AACA,2CACA,AACA,6BACA,MACA,AACA,2BACA,cACA,sBACA,QACA,0BACA,AACA,wBACA,MACA,oCACA,6BACA,AACA,4DACA,YACA,aACA,AACA,qDACA,4CACA,AACA,UACA,AACA,OACA,EACA,CACA,AACA,4BACA,IACA,AACA,AACA,qDACA,AACA,wBACA,2BACA,iCACA,6BACA,AACA,4DACA,YACA,YACA,GACA,AACA,8BACA,IACA,AACA,AACA,oCACA,AACA,AACA,0EACA,AACA,wBACA,2BACA,AACA,kEACA,YACA,aACA,AACA,qDACA,4CACA,AACA,UACA,AACA,kBACA,AACA,UACA,GACA,AACA,OACA,MClJA,cACA,AACA,iCACA,SACA,AACA,aACA,2DACA,SACA,oCACA,AACA,AACA,AACA,0BACA,4BACA,AACA,aACA,AACA,AACA,8BACA,CAcA,SAbA,AACA,uEACA,SACA,oCACA,AACA,yBACA,yBACA,YACA,AACA,cACA,4BACA,AACA,eAEA,EACA,EACA,AACA,IACA,ACtCA,AACA,AACA,AACA,QACA,+BACA,aA6FA,iBACA,AACA,gDACA,AACA,2DACA,IACA,eACA,kCACA,OACA,AACA,wCACA,CACA,0BACA,eACA,YACA,AACA,uCACA,CACA,0BACA,eACA,YACA,AACA,+BACA,AACA,AACA,6BACA,AACA,0BACA,eACA,AACA,aACA,AACA,MACA,AACA,AACA,2BACA,eACA,AACA,YACA,EACA,AACA,AACA,AACA,AACA,qBAxIA,UACA,0BACA,AACA,oBACA,AACA,UACA,AACA,uDACA,kDACA,wEACA,AACA,sEACA,AACA,yFACA,GACA,UACA,mFACA,GACA,OACA,AACA,+DACA,SACA,eACA,cACA,kDACA,8BACA,uDACA,iBACA,mDACA,mBACA,yDACA,wBACA,sDACA,oBACA,AACA,0DACA,oBACA,iCACA,mBACA,AACA,kBACA,uBACA,AACA,AACA,AACA,yBACA,oBACA,AACA,AACA,oBACA,SACA,AACA,2DACA,yBACA,4BACA,+CACA,GACA,SACA,EACA,AACA,AACA,oEACA,UACA,oBACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,8CACA,IACA,sCACA,KACA,YACA,AACA,yBACA,SACA,6BACA,KACA,AACA,oBACA,YACA,AACA,AACA,AACA,AACA,AACA,yBA8CA,GACA,AACA,AACA,8BACA,AACA,2BACA,8CACA,KACA,AACA,AACA,AACA,AACA,AACA,yBACA,kFACA,4BACA,2EACA,KACA,AACA,gBACA,AACA,kBACA,uCACA,2BACA,AACA,yBACA,oBACA,0CACA,WACA,SACA,AACA,KACA,+BACA,WACA,AACA,IACA,AACA,uBACA,sCACA,AACA,AACA,MACA,GACA,AACA,6BACA,GACA,2CACA,AACA,4BACA,wCACA,oBACA,SACA,AACA,KACA,uBACA,SACA,AACA,AACA,uBACA,iBACA,AACA,oEACA,GACA,uBACA,WACA,EACA,AACA,AACA,AACA,AACA,0BACA,iCACA,GACA,OACA,EACA,AACA,gCACA,8CACA,qEACA,YACA,AACA,4BACA,2DACA,YACA,CACA,AACA","file":"ilab-media-tools.js","sourcesContent":["/*!\n * Cropper v2.3.2\n * https://github.com/fengyuanchen/cropper\n *\n * Copyright (c) 2014-2016 Fengyuan Chen and contributors\n * Released under the MIT license\n *\n * Date: 2016-06-08T12:14:46.286Z\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node / CommonJS\n    factory(require('jquery'));\n  } else {\n    // Browser globals.\n    factory(jQuery);\n  }\n})(function ($) {\n\n  'use strict';\n\n  // Globals\n  var $window = $(window);\n  var $document = $(document);\n  var location = window.location;\n  var navigator = window.navigator;\n  var ArrayBuffer = window.ArrayBuffer;\n  var Uint8Array = window.Uint8Array;\n  var DataView = window.DataView;\n  var btoa = window.btoa;\n\n  // Constants\n  var NAMESPACE = 'cropper';\n\n  // Classes\n  var CLASS_MODAL = 'cropper-modal';\n  var CLASS_HIDE = 'cropper-hide';\n  var CLASS_HIDDEN = 'cropper-hidden';\n  var CLASS_INVISIBLE = 'cropper-invisible';\n  var CLASS_MOVE = 'cropper-move';\n  var CLASS_CROP = 'cropper-crop';\n  var CLASS_DISABLED = 'cropper-disabled';\n  var CLASS_BG = 'cropper-bg';\n\n  // Events\n  var EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown';\n  var EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove';\n  var EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_LOAD = 'load.' + NAMESPACE;\n  var EVENT_ERROR = 'error.' + NAMESPACE;\n  var EVENT_RESIZE = 'resize.' + NAMESPACE; // Bind to window with namespace\n  var EVENT_BUILD = 'build.' + NAMESPACE;\n  var EVENT_BUILT = 'built.' + NAMESPACE;\n  var EVENT_CROP_START = 'cropstart.' + NAMESPACE;\n  var EVENT_CROP_MOVE = 'cropmove.' + NAMESPACE;\n  var EVENT_CROP_END = 'cropend.' + NAMESPACE;\n  var EVENT_CROP = 'crop.' + NAMESPACE;\n  var EVENT_ZOOM = 'zoom.' + NAMESPACE;\n\n  // RegExps\n  var REGEXP_ACTIONS = /e|w|s|n|se|sw|ne|nw|all|crop|move|zoom/;\n  var REGEXP_DATA_URL = /^data\\:/;\n  var REGEXP_DATA_URL_HEAD = /^data\\:([^\\;]+)\\;base64,/;\n  var REGEXP_DATA_URL_JPEG = /^data\\:image\\/jpeg.*;base64,/;\n\n  // Data keys\n  var DATA_PREVIEW = 'preview';\n  var DATA_ACTION = 'action';\n\n  // Actions\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_NONE = 'none';\n\n  // Supports\n  var SUPPORT_CANVAS = $.isFunction($('<canvas>')[0].getContext);\n  var IS_SAFARI_OR_UIWEBVIEW = navigator && /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent);\n\n  // Maths\n  var num = Number;\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n  var sin = Math.sin;\n  var cos = Math.cos;\n  var sqrt = Math.sqrt;\n  var round = Math.round;\n  var floor = Math.floor;\n\n  // Utilities\n  var fromCharCode = String.fromCharCode;\n\n  function isNumber(n) {\n    return typeof n === 'number' && !isNaN(n);\n  }\n\n  function isUndefined(n) {\n    return typeof n === 'undefined';\n  }\n\n  function toArray(obj, offset) {\n    var args = [];\n\n    // This is necessary for IE8\n    if (isNumber(offset)) {\n      args.push(offset);\n    }\n\n    return args.slice.apply(obj, args);\n  }\n\n  // Custom proxy to avoid jQuery's guid\n  function proxy(fn, context) {\n    var args = toArray(arguments, 2);\n\n    return function () {\n      return fn.apply(context, args.concat(toArray(arguments)));\n    };\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(/^(https?:)\\/\\/([^\\:\\/\\?#]+):?(\\d*)/i);\n\n    return parts && (\n      parts[1] !== location.protocol ||\n      parts[2] !== location.hostname ||\n      parts[3] !== location.port\n    );\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + (new Date()).getTime();\n\n    return (url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp);\n  }\n\n  function getCrossOrigin(crossOrigin) {\n    return crossOrigin ? ' crossOrigin=\"' + crossOrigin + '\"' : '';\n  }\n\n  function getImageSize(image, callback) {\n    var newImage;\n\n    // Modern browsers (ignore Safari, #120 & #509)\n    if (image.naturalWidth && !IS_SAFARI_OR_UIWEBVIEW) {\n      return callback(image.naturalWidth, image.naturalHeight);\n    }\n\n    // IE8: Don't use `new Image()` here (#319)\n    newImage = document.createElement('img');\n\n    newImage.onload = function () {\n      callback(this.width, this.height);\n    };\n\n    newImage.src = image.src;\n  }\n\n  function getTransform(options) {\n    var transforms = [];\n    var rotate = options.rotate;\n    var scaleX = options.scaleX;\n    var scaleY = options.scaleY;\n\n    // Scale should come first before rotate (#633)\n    if (isNumber(scaleX) && isNumber(scaleY)) {\n      transforms.push('scale(' + scaleX + ',' + scaleY + ')');\n    }\n\n    if (isNumber(rotate)) {\n      transforms.push('rotate(' + rotate + 'deg)');\n    }\n\n    return transforms.length ? transforms.join(' ') : 'none';\n  }\n\n  function getRotatedSizes(data, isReversed) {\n    var deg = abs(data.degree) % 180;\n    var arc = (deg > 90 ? (180 - deg) : deg) * Math.PI / 180;\n    var sinArc = sin(arc);\n    var cosArc = cos(arc);\n    var width = data.width;\n    var height = data.height;\n    var aspectRatio = data.aspectRatio;\n    var newWidth;\n    var newHeight;\n\n    if (!isReversed) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data) {\n    var canvas = $('<canvas>')[0];\n    var context = canvas.getContext('2d');\n    var dstX = 0;\n    var dstY = 0;\n    var dstWidth = data.naturalWidth;\n    var dstHeight = data.naturalHeight;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n    var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n    var rotatable = isNumber(rotate) && rotate !== 0;\n    var advanced = rotatable || scalable;\n    var canvasWidth = dstWidth * abs(scaleX || 1);\n    var canvasHeight = dstHeight * abs(scaleY || 1);\n    var translateX;\n    var translateY;\n    var rotated;\n\n    if (scalable) {\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    if (rotatable) {\n      rotated = getRotatedSizes({\n        width: canvasWidth,\n        height: canvasHeight,\n        degree: rotate\n      });\n\n      canvasWidth = rotated.width;\n      canvasHeight = rotated.height;\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (advanced) {\n      dstX = -dstWidth / 2;\n      dstY = -dstHeight / 2;\n\n      context.save();\n      context.translate(translateX, translateY);\n    }\n\n    // Scale should come first before rotate (#633, #709)\n    if (scalable) {\n      context.scale(scaleX, scaleY);\n    }\n\n    if (rotatable) {\n      context.rotate(rotate * Math.PI / 180);\n    }\n\n    context.drawImage(image, floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));\n\n    if (advanced) {\n      context.restore();\n    }\n\n    return canvas;\n  }\n\n  function getTouchesCenter(touches) {\n    var length = touches.length;\n    var pageX = 0;\n    var pageY = 0;\n\n    if (length) {\n      $.each(touches, function (i, touch) {\n        pageX += touch.pageX;\n        pageY += touch.pageY;\n      });\n\n      pageX /= length;\n      pageY /= length;\n    }\n\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    var i;\n\n    for (i = start, length += start; i < length; i++) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n\n  function getOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var length = dataView.byteLength;\n    var orientation;\n    var exifIDCode;\n    var tiffOffset;\n    var firstIFDOffset;\n    var littleEndian;\n    var endianness;\n    var app1Start;\n    var ifdStart;\n    var offset;\n    var i;\n\n    // Only handle JPEG image (start by 0xFFD8)\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      offset = 2;\n\n      while (offset < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset++;\n      }\n    }\n\n    if (app1Start) {\n      exifIDCode = app1Start + 4;\n      tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        endianness = dataView.getUint16(tiffOffset);\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n          if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n            firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n            if (firstIFDOffset >= 0x00000008) {\n              ifdStart = tiffOffset + firstIFDOffset;\n            }\n          }\n        }\n      }\n    }\n\n    if (ifdStart) {\n      length = dataView.getUint16(ifdStart, littleEndian);\n\n      for (i = 0; i < length; i++) {\n        offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) {\n\n          // 8 is the offset of the current tag's value\n          offset += 8;\n\n          // Get the original orientation value\n          orientation = dataView.getUint16(offset, littleEndian);\n\n          // Override the orientation with its default value for Safari (#120)\n          if (IS_SAFARI_OR_UIWEBVIEW) {\n            dataView.setUint16(offset, 1, littleEndian);\n          }\n\n          break;\n        }\n      }\n    }\n\n    return orientation;\n  }\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var length = binary.length;\n    var arrayBuffer = new ArrayBuffer(length);\n    var dataView = new Uint8Array(arrayBuffer);\n    var i;\n\n    for (i = 0; i < length; i++) {\n      dataView[i] = binary.charCodeAt(i);\n    }\n\n    return arrayBuffer;\n  }\n\n  // Only available for JPEG image\n  function arrayBufferToDataURL(arrayBuffer) {\n    var dataView = new Uint8Array(arrayBuffer);\n    var length = dataView.length;\n    var base64 = '';\n    var i;\n\n    for (i = 0; i < length; i++) {\n      base64 += fromCharCode(dataView[i]);\n    }\n\n    return 'data:image/jpeg;base64,' + btoa(base64);\n  }\n\n  function Cropper(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Cropper.DEFAULTS, $.isPlainObject(options) && options);\n    this.isLoaded = false;\n    this.isBuilt = false;\n    this.isCompleted = false;\n    this.isRotated = false;\n    this.isCropped = false;\n    this.isDisabled = false;\n    this.isReplaced = false;\n    this.isLimited = false;\n    this.wheeling = false;\n    this.isImg = false;\n    this.originalUrl = '';\n    this.canvas = null;\n    this.cropBox = null;\n    this.init();\n  }\n\n  Cropper.prototype = {\n    constructor: Cropper,\n\n    init: function () {\n      var $this = this.$element;\n      var url;\n\n      if ($this.is('img')) {\n        this.isImg = true;\n\n        // Should use `$.fn.attr` here. e.g.: \"img/picture.jpg\"\n        this.originalUrl = url = $this.attr('src');\n\n        // Stop when it's a blank image\n        if (!url) {\n          return;\n        }\n\n        // Should use `$.fn.prop` here. e.g.: \"http://example.com/img/picture.jpg\"\n        url = $this.prop('src');\n      } else if ($this.is('canvas') && SUPPORT_CANVAS) {\n        url = $this[0].toDataURL();\n      }\n\n      this.load(url);\n    },\n\n    // A shortcut for triggering custom events\n    trigger: function (type, data) {\n      var e = $.Event(type, data);\n\n      this.$element.trigger(e);\n\n      return e;\n    },\n\n    load: function (url) {\n      var options = this.options;\n      var $this = this.$element;\n      var read;\n      var xhr;\n\n      if (!url) {\n        return;\n      }\n\n      // Trigger build event first\n      $this.one(EVENT_BUILD, options.build);\n\n      if (this.trigger(EVENT_BUILD).isDefaultPrevented()) {\n        return;\n      }\n\n      this.url = url;\n      this.image = {};\n\n      if (!options.checkOrientation || !ArrayBuffer) {\n        return this.clone();\n      }\n\n      read = $.proxy(this.read, this);\n\n      // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n      if (REGEXP_DATA_URL.test(url)) {\n        return REGEXP_DATA_URL_JPEG.test(url) ?\n          read(dataURLToArrayBuffer(url)) :\n          this.clone();\n      }\n\n      xhr = new XMLHttpRequest();\n\n      xhr.onerror = xhr.onabort = $.proxy(function () {\n        this.clone();\n      }, this);\n\n      xhr.onload = function () {\n        read(this.response);\n      };\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url) && $this.prop('crossOrigin')) {\n        url = addTimestamp(url);\n      }\n\n      xhr.open('get', url);\n      xhr.responseType = 'arraybuffer';\n      xhr.send();\n    },\n\n    read: function (arrayBuffer) {\n      var options = this.options;\n      var orientation = getOrientation(arrayBuffer);\n      var image = this.image;\n      var rotate;\n      var scaleX;\n      var scaleY;\n\n      if (orientation > 1) {\n        this.url = arrayBufferToDataURL(arrayBuffer);\n\n        switch (orientation) {\n\n          // flip horizontal\n          case 2:\n            scaleX = -1;\n            break;\n\n          // rotate left 180°\n          case 3:\n            rotate = -180;\n            break;\n\n          // flip vertical\n          case 4:\n            scaleY = -1;\n            break;\n\n          // flip vertical + rotate right 90°\n          case 5:\n            rotate = 90;\n            scaleY = -1;\n            break;\n\n          // rotate right 90°\n          case 6:\n            rotate = 90;\n            break;\n\n          // flip horizontal + rotate right 90°\n          case 7:\n            rotate = 90;\n            scaleX = -1;\n            break;\n\n          // rotate left 90°\n          case 8:\n            rotate = -90;\n            break;\n        }\n      }\n\n      if (options.rotatable) {\n        image.rotate = rotate;\n      }\n\n      if (options.scalable) {\n        image.scaleX = scaleX;\n        image.scaleY = scaleY;\n      }\n\n      this.clone();\n    },\n\n    clone: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var url = this.url;\n      var crossOrigin = '';\n      var crossOriginUrl;\n      var $clone;\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url)) {\n        crossOrigin = $this.prop('crossOrigin');\n\n        if (crossOrigin) {\n          crossOriginUrl = url;\n        } else {\n          crossOrigin = 'anonymous';\n\n          // Bust cache (#148) when there is not a \"crossOrigin\" property\n          crossOriginUrl = addTimestamp(url);\n        }\n      }\n\n      this.crossOrigin = crossOrigin;\n      this.crossOriginUrl = crossOriginUrl;\n      this.$clone = $clone = $('<img' + getCrossOrigin(crossOrigin) + ' src=\"' + (crossOriginUrl || url) + '\">');\n\n      if (this.isImg) {\n        if ($this[0].complete) {\n          this.start();\n        } else {\n          $this.one(EVENT_LOAD, $.proxy(this.start, this));\n        }\n      } else {\n        $clone.\n          one(EVENT_LOAD, $.proxy(this.start, this)).\n          one(EVENT_ERROR, $.proxy(this.stop, this)).\n          addClass(CLASS_HIDE).\n          insertAfter($this);\n      }\n    },\n\n    start: function () {\n      var $image = this.$element;\n      var $clone = this.$clone;\n\n      if (!this.isImg) {\n        $clone.off(EVENT_ERROR, this.stop);\n        $image = $clone;\n      }\n\n      getImageSize($image[0], $.proxy(function (naturalWidth, naturalHeight) {\n        $.extend(this.image, {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        });\n\n        this.isLoaded = true;\n        this.build();\n      }, this));\n    },\n\n    stop: function () {\n      this.$clone.remove();\n      this.$clone = null;\n    },\n\n    build: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $clone = this.$clone;\n      var $cropper;\n      var $cropBox;\n      var $face;\n\n      if (!this.isLoaded) {\n        return;\n      }\n\n      // Unbuild first when replace\n      if (this.isBuilt) {\n        this.unbuild();\n      }\n\n      // Create cropper elements\n      this.$container = $this.parent();\n      this.$cropper = $cropper = $(Cropper.TEMPLATE);\n      this.$canvas = $cropper.find('.cropper-canvas').append($clone);\n      this.$dragBox = $cropper.find('.cropper-drag-box');\n      this.$cropBox = $cropBox = $cropper.find('.cropper-crop-box');\n      this.$viewBox = $cropper.find('.cropper-view-box');\n      this.$face = $face = $cropBox.find('.cropper-face');\n\n      // Hide the original image\n      $this.addClass(CLASS_HIDDEN).after($cropper);\n\n      // Show the clone image if is hidden\n      if (!this.isImg) {\n        $clone.removeClass(CLASS_HIDE);\n      }\n\n      this.initPreview();\n      this.bind();\n\n      options.aspectRatio = max(0, options.aspectRatio) || NaN;\n      options.viewMode = max(0, min(3, round(options.viewMode))) || 0;\n\n      if (options.autoCrop) {\n        this.isCropped = true;\n\n        if (options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      } else {\n        $cropBox.addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.guides) {\n        $cropBox.find('.cropper-dashed').addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        $cropBox.find('.cropper-center').addClass(CLASS_HIDDEN);\n      }\n\n      if (options.cropBoxMovable) {\n        $face.addClass(CLASS_MOVE).data(DATA_ACTION, ACTION_ALL);\n      }\n\n      if (!options.highlight) {\n        $face.addClass(CLASS_INVISIBLE);\n      }\n\n      if (options.background) {\n        $cropper.addClass(CLASS_BG);\n      }\n\n      if (!options.cropBoxResizable) {\n        $cropBox.find('.cropper-line, .cropper-point').addClass(CLASS_HIDDEN);\n      }\n\n      this.setDragMode(options.dragMode);\n      this.render();\n      this.isBuilt = true;\n      this.setData(options.data);\n      $this.one(EVENT_BUILT, options.built);\n\n      // Trigger the built event asynchronously to keep `data('cropper')` is defined\n      setTimeout($.proxy(function () {\n        this.trigger(EVENT_BUILT);\n        this.trigger(EVENT_CROP, this.getData());\n        this.isCompleted = true;\n      }, this), 0);\n    },\n\n    unbuild: function () {\n      if (!this.isBuilt) {\n        return;\n      }\n\n      this.isBuilt = false;\n      this.isCompleted = false;\n      this.initialImage = null;\n\n      // Clear `initialCanvas` is necessary when replace\n      this.initialCanvas = null;\n      this.initialCropBox = null;\n      this.container = null;\n      this.canvas = null;\n\n      // Clear `cropBox` is necessary when replace\n      this.cropBox = null;\n      this.unbind();\n\n      this.resetPreview();\n      this.$preview = null;\n\n      this.$viewBox = null;\n      this.$cropBox = null;\n      this.$dragBox = null;\n      this.$canvas = null;\n      this.$container = null;\n\n      this.$cropper.remove();\n      this.$cropper = null;\n    },\n\n    render: function () {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    initContainer: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $container = this.$container;\n      var $cropper = this.$cropper;\n\n      $cropper.addClass(CLASS_HIDDEN);\n      $this.removeClass(CLASS_HIDDEN);\n\n      $cropper.css((this.container = {\n        width: max($container.width(), num(options.minContainerWidth) || 200),\n        height: max($container.height(), num(options.minContainerHeight) || 100)\n      }));\n\n      $this.addClass(CLASS_HIDDEN);\n      $cropper.removeClass(CLASS_HIDDEN);\n    },\n\n    // Canvas (image wrapper)\n    initCanvas: function () {\n      var viewMode = this.options.viewMode;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var image = this.image;\n      var imageNaturalWidth = image.naturalWidth;\n      var imageNaturalHeight = image.naturalHeight;\n      var is90Degree = abs(image.rotate) === 90;\n      var naturalWidth = is90Degree ? imageNaturalHeight : imageNaturalWidth;\n      var naturalHeight = is90Degree ? imageNaturalWidth : imageNaturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerWidth;\n      var canvasHeight = containerHeight;\n      var canvas;\n\n      if (containerHeight * aspectRatio > containerWidth) {\n        if (viewMode === 3) {\n          canvasWidth = containerHeight * aspectRatio;\n        } else {\n          canvasHeight = containerWidth / aspectRatio;\n        }\n      } else {\n        if (viewMode === 3) {\n          canvasHeight = containerWidth / aspectRatio;\n        } else {\n          canvasWidth = containerHeight * aspectRatio;\n        }\n      }\n\n      canvas = {\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        aspectRatio: aspectRatio,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n\n      canvas.oldLeft = canvas.left = (containerWidth - canvasWidth) / 2;\n      canvas.oldTop = canvas.top = (containerHeight - canvasHeight) / 2;\n\n      this.canvas = canvas;\n      this.isLimited = (viewMode === 1 || viewMode === 2);\n      this.limitCanvas(true, true);\n      this.initialImage = $.extend({}, image);\n      this.initialCanvas = $.extend({}, canvas);\n    },\n\n    limitCanvas: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var viewMode = options.viewMode;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n      var cropBox = this.cropBox;\n      var isCropped = this.isCropped && cropBox;\n      var minCanvasWidth;\n      var minCanvasHeight;\n      var newCanvasLeft;\n      var newCanvasTop;\n\n      if (isSizeLimited) {\n        minCanvasWidth = num(options.minCanvasWidth) || 0;\n        minCanvasHeight = num(options.minCanvasHeight) || 0;\n\n        if (viewMode) {\n          if (viewMode > 1) {\n            minCanvasWidth = max(minCanvasWidth, containerWidth);\n            minCanvasHeight = max(minCanvasHeight, containerHeight);\n\n            if (viewMode === 3) {\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          } else {\n            if (minCanvasWidth) {\n              minCanvasWidth = max(minCanvasWidth, isCropped ? cropBox.width : 0);\n            } else if (minCanvasHeight) {\n              minCanvasHeight = max(minCanvasHeight, isCropped ? cropBox.height : 0);\n            } else if (isCropped) {\n              minCanvasWidth = cropBox.width;\n              minCanvasHeight = cropBox.height;\n\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          }\n        }\n\n        if (minCanvasWidth && minCanvasHeight) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          } else {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          }\n        } else if (minCanvasWidth) {\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        }\n\n        canvas.minWidth = minCanvasWidth;\n        canvas.minHeight = minCanvasHeight;\n        canvas.maxWidth = Infinity;\n        canvas.maxHeight = Infinity;\n      }\n\n      if (isPositionLimited) {\n        if (viewMode) {\n          newCanvasLeft = containerWidth - canvas.width;\n          newCanvasTop = containerHeight - canvas.height;\n\n          canvas.minLeft = min(0, newCanvasLeft);\n          canvas.minTop = min(0, newCanvasTop);\n          canvas.maxLeft = max(0, newCanvasLeft);\n          canvas.maxTop = max(0, newCanvasTop);\n\n          if (isCropped && this.isLimited) {\n            canvas.minLeft = min(\n              cropBox.left,\n              cropBox.left + cropBox.width - canvas.width\n            );\n            canvas.minTop = min(\n              cropBox.top,\n              cropBox.top + cropBox.height - canvas.height\n            );\n            canvas.maxLeft = cropBox.left;\n            canvas.maxTop = cropBox.top;\n\n            if (viewMode === 2) {\n              if (canvas.width >= containerWidth) {\n                canvas.minLeft = min(0, newCanvasLeft);\n                canvas.maxLeft = max(0, newCanvasLeft);\n              }\n\n              if (canvas.height >= containerHeight) {\n                canvas.minTop = min(0, newCanvasTop);\n                canvas.maxTop = max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvas.minLeft = -canvas.width;\n          canvas.minTop = -canvas.height;\n          canvas.maxLeft = containerWidth;\n          canvas.maxTop = containerHeight;\n        }\n      }\n    },\n\n    renderCanvas: function (isChanged) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var rotate = image.rotate;\n      var naturalWidth = image.naturalWidth;\n      var naturalHeight = image.naturalHeight;\n      var aspectRatio;\n      var rotated;\n\n      if (this.isRotated) {\n        this.isRotated = false;\n\n        // Computes rotated sizes with image sizes\n        rotated = getRotatedSizes({\n          width: image.width,\n          height: image.height,\n          degree: rotate\n        });\n\n        aspectRatio = rotated.width / rotated.height;\n\n        if (aspectRatio !== canvas.aspectRatio) {\n          canvas.left -= (rotated.width - canvas.width) / 2;\n          canvas.top -= (rotated.height - canvas.height) / 2;\n          canvas.width = rotated.width;\n          canvas.height = rotated.height;\n          canvas.aspectRatio = aspectRatio;\n          canvas.naturalWidth = naturalWidth;\n          canvas.naturalHeight = naturalHeight;\n\n          // Computes rotated sizes with natural image sizes\n          if (rotate % 180) {\n            rotated = getRotatedSizes({\n              width: naturalWidth,\n              height: naturalHeight,\n              degree: rotate\n            });\n\n            canvas.naturalWidth = rotated.width;\n            canvas.naturalHeight = rotated.height;\n          }\n\n          this.limitCanvas(true, false);\n        }\n      }\n\n      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {\n        canvas.left = canvas.oldLeft;\n      }\n\n      if (canvas.height > canvas.maxHeight || canvas.height < canvas.minHeight) {\n        canvas.top = canvas.oldTop;\n      }\n\n      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);\n      canvas.height = min(max(canvas.height, canvas.minHeight), canvas.maxHeight);\n\n      this.limitCanvas(false, true);\n\n      canvas.oldLeft = canvas.left = min(max(canvas.left, canvas.minLeft), canvas.maxLeft);\n      canvas.oldTop = canvas.top = min(max(canvas.top, canvas.minTop), canvas.maxTop);\n\n      this.$canvas.css({\n        width: canvas.width,\n        height: canvas.height,\n        left: canvas.left,\n        top: canvas.top\n      });\n\n      this.renderImage();\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCropBox(true, true);\n      }\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    renderImage: function (isChanged) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var reversed;\n\n      if (image.rotate) {\n        reversed = getRotatedSizes({\n          width: canvas.width,\n          height: canvas.height,\n          degree: image.rotate,\n          aspectRatio: image.aspectRatio\n        }, true);\n      }\n\n      $.extend(image, reversed ? {\n        width: reversed.width,\n        height: reversed.height,\n        left: (canvas.width - reversed.width) / 2,\n        top: (canvas.height - reversed.height) / 2\n      } : {\n        width: canvas.width,\n        height: canvas.height,\n        left: 0,\n        top: 0\n      });\n\n      this.$clone.css({\n        width: image.width,\n        height: image.height,\n        marginLeft: image.left,\n        marginTop: image.top,\n        transform: getTransform(image)\n      });\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    initCropBox: function () {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.aspectRatio;\n      var autoCropArea = num(options.autoCropArea) || 0.8;\n      var cropBox = {\n            width: canvas.width,\n            height: canvas.height\n          };\n\n      if (aspectRatio) {\n        if (canvas.height * aspectRatio > canvas.width) {\n          cropBox.height = cropBox.width / aspectRatio;\n        } else {\n          cropBox.width = cropBox.height * aspectRatio;\n        }\n      }\n\n      this.cropBox = cropBox;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      // The width of auto crop area must large than \"minWidth\", and the height too. (#164)\n      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);\n      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);\n      cropBox.oldLeft = cropBox.left = canvas.left + (canvas.width - cropBox.width) / 2;\n      cropBox.oldTop = cropBox.top = canvas.top + (canvas.height - cropBox.height) / 2;\n\n      this.initialCropBox = $.extend({}, cropBox);\n    },\n\n    limitCropBox: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var isLimited = this.isLimited;\n      var minCropBoxWidth;\n      var minCropBoxHeight;\n      var maxCropBoxWidth;\n      var maxCropBoxHeight;\n\n      if (isSizeLimited) {\n        minCropBoxWidth = num(options.minCropBoxWidth) || 0;\n        minCropBoxHeight = num(options.minCropBoxHeight) || 0;\n\n        // The min/maxCropBoxWidth/Height must be less than containerWidth/Height\n        minCropBoxWidth = min(minCropBoxWidth, containerWidth);\n        minCropBoxHeight = min(minCropBoxHeight, containerHeight);\n        maxCropBoxWidth = min(containerWidth, isLimited ? canvas.width : containerWidth);\n        maxCropBoxHeight = min(containerHeight, isLimited ? canvas.height : containerHeight);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        }\n\n        // The minWidth/Height must be less than maxWidth/Height\n        cropBox.minWidth = min(minCropBoxWidth, maxCropBoxWidth);\n        cropBox.minHeight = min(minCropBoxHeight, maxCropBoxHeight);\n        cropBox.maxWidth = maxCropBoxWidth;\n        cropBox.maxHeight = maxCropBoxHeight;\n      }\n\n      if (isPositionLimited) {\n        if (isLimited) {\n          cropBox.minLeft = max(0, canvas.left);\n          cropBox.minTop = max(0, canvas.top);\n          cropBox.maxLeft = min(containerWidth, canvas.left + canvas.width) - cropBox.width;\n          cropBox.maxTop = min(containerHeight, canvas.top + canvas.height) - cropBox.height;\n        } else {\n          cropBox.minLeft = 0;\n          cropBox.minTop = 0;\n          cropBox.maxLeft = containerWidth - cropBox.width;\n          cropBox.maxTop = containerHeight - cropBox.height;\n        }\n      }\n    },\n\n    renderCropBox: function () {\n      var options = this.options;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var cropBox = this.cropBox;\n\n      if (cropBox.width > cropBox.maxWidth || cropBox.width < cropBox.minWidth) {\n        cropBox.left = cropBox.oldLeft;\n      }\n\n      if (cropBox.height > cropBox.maxHeight || cropBox.height < cropBox.minHeight) {\n        cropBox.top = cropBox.oldTop;\n      }\n\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      this.limitCropBox(false, true);\n\n      cropBox.oldLeft = cropBox.left = min(max(cropBox.left, cropBox.minLeft), cropBox.maxLeft);\n      cropBox.oldTop = cropBox.top = min(max(cropBox.top, cropBox.minTop), cropBox.maxTop);\n\n      if (options.movable && options.cropBoxMovable) {\n\n        // Turn to move the canvas when the crop box is equal to the container\n        this.$face.data(DATA_ACTION, (cropBox.width === containerWidth && cropBox.height === containerHeight) ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      this.$cropBox.css({\n        width: cropBox.width,\n        height: cropBox.height,\n        left: cropBox.left,\n        top: cropBox.top\n      });\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.isDisabled) {\n        this.output();\n      }\n    },\n\n    output: function () {\n      this.preview();\n\n      if (this.isCompleted) {\n        this.trigger(EVENT_CROP, this.getData());\n      }\n    },\n\n    initPreview: function () {\n      var crossOrigin = getCrossOrigin(this.crossOrigin);\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var $clone2;\n\n      this.$preview = $(this.options.preview);\n      this.$clone2 = $clone2 = $('<img' + crossOrigin + ' src=\"' + url + '\">');\n      this.$viewBox.html($clone2);\n      this.$preview.each(function () {\n        var $this = $(this);\n\n        // Save the original size for recover\n        $this.data(DATA_PREVIEW, {\n          width: $this.width(),\n          height: $this.height(),\n          html: $this.html()\n        });\n\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * (Occur only when margin-top <= -height)\n         */\n        $this.html(\n          '<img' + crossOrigin + ' src=\"' + url + '\" style=\"' +\n          'display:block;width:100%;height:auto;' +\n          'min-width:0!important;min-height:0!important;' +\n          'max-width:none!important;max-height:none!important;' +\n          'image-orientation:0deg!important;\">'\n        );\n      });\n    },\n\n    resetPreview: function () {\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_PREVIEW);\n\n        $this.css({\n          width: data.width,\n          height: data.height\n        }).html(data.html).removeData(DATA_PREVIEW);\n      });\n    },\n\n    preview: function () {\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var cropBoxWidth = cropBox.width;\n      var cropBoxHeight = cropBox.height;\n      var width = image.width;\n      var height = image.height;\n      var left = cropBox.left - canvas.left - image.left;\n      var top = cropBox.top - canvas.top - image.top;\n\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      this.$clone2.css({\n        width: width,\n        height: height,\n        marginLeft: -left,\n        marginTop: -top,\n        transform: getTransform(image)\n      });\n\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        $this.css({\n          width: newWidth,\n          height: newHeight\n        }).find('img').css({\n          width: width * ratio,\n          height: height * ratio,\n          marginLeft: -left * ratio,\n          marginTop: -top * ratio,\n          transform: getTransform(image)\n        });\n      });\n    },\n\n    bind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.on(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.on(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.on(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.on(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.on(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.cropStart, this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        $cropper.on(EVENT_WHEEL, $.proxy(this.wheel, this));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));\n      }\n\n      $document.\n        on(EVENT_MOUSE_MOVE, (this._cropMove = proxy(this.cropMove, this))).\n        on(EVENT_MOUSE_UP, (this._cropEnd = proxy(this.cropEnd, this)));\n\n      if (options.responsive) {\n        $window.on(EVENT_RESIZE, (this._resize = proxy(this.resize, this)));\n      }\n    },\n\n    unbind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.off(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.off(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.off(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.off(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.off(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.off(EVENT_MOUSE_DOWN, this.cropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        $cropper.off(EVENT_WHEEL, this.wheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        $cropper.off(EVENT_DBLCLICK, this.dblclick);\n      }\n\n      $document.\n        off(EVENT_MOUSE_MOVE, this._cropMove).\n        off(EVENT_MOUSE_UP, this._cropEnd);\n\n      if (options.responsive) {\n        $window.off(EVENT_RESIZE, this._resize);\n      }\n    },\n\n    resize: function () {\n      var restore = this.options.restore;\n      var $container = this.$container;\n      var container = this.container;\n      var canvasData;\n      var cropBoxData;\n      var ratio;\n\n      // Check `container` is necessary for IE8\n      if (this.isDisabled || !container) {\n        return;\n      }\n\n      ratio = $container.width() / container.width;\n\n      // Resize when width changed or height changed\n      if (ratio !== 1 || $container.height() !== container.height) {\n        if (restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (restore) {\n          this.setCanvasData($.each(canvasData, function (i, n) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData($.each(cropBoxData, function (i, n) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n\n    dblclick: function () {\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (this.$dragBox.hasClass(CLASS_CROP)) {\n        this.setDragMode(ACTION_MOVE);\n      } else {\n        this.setDragMode(ACTION_CROP);\n      }\n    },\n\n    wheel: function (event) {\n      var e = event.originalEvent || event;\n      var ratio = num(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      event.preventDefault();\n\n      // Limit wheel speed to prevent zoom too fast\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n\n      setTimeout($.proxy(function () {\n        this.wheeling = false;\n      }, this), 50);\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, event);\n    },\n\n    cropStart: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = event;\n      var touchesLength;\n      var action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            e = touches[1];\n            this.startX2 = e.pageX;\n            this.startY2 = e.pageY;\n            action = ACTION_ZOOM;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      action = action || $(e.target).data(DATA_ACTION);\n\n      if (REGEXP_ACTIONS.test(action)) {\n        if (this.trigger(EVENT_CROP_START, {\n          originalEvent: originalEvent,\n          action: action\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.action = action;\n        this.cropping = false;\n\n        // IE8  has `event.pageX/Y`, but not `event.originalEvent.pageX/Y`\n        // IE10 has `event.originalEvent.pageX/Y`, but not `event.pageX/Y`\n        this.startX = e.pageX || originalEvent && originalEvent.pageX;\n        this.startY = e.pageY || originalEvent && originalEvent.pageY;\n\n        if (action === ACTION_CROP) {\n          this.cropping = true;\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      }\n    },\n\n    cropMove: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = event;\n      var action = this.action;\n      var touchesLength;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            e = touches[1];\n            this.endX2 = e.pageX;\n            this.endY2 = e.pageY;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      if (action) {\n        if (this.trigger(EVENT_CROP_MOVE, {\n          originalEvent: originalEvent,\n          action: action\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.endX = e.pageX || originalEvent && originalEvent.pageX;\n        this.endY = e.pageY || originalEvent && originalEvent.pageY;\n\n        this.change(e.shiftKey, action === ACTION_ZOOM ? event : null);\n      }\n    },\n\n    cropEnd: function (event) {\n      var originalEvent = event.originalEvent;\n      var action = this.action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (action) {\n        event.preventDefault();\n\n        if (this.cropping) {\n          this.cropping = false;\n          this.$dragBox.toggleClass(CLASS_MODAL, this.isCropped && this.options.modal);\n        }\n\n        this.action = '';\n\n        this.trigger(EVENT_CROP_END, {\n          originalEvent: originalEvent,\n          action: action\n        });\n      }\n    },\n\n    change: function (shiftKey, event) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var action = this.action;\n      var container = this.container;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var width = cropBox.width;\n      var height = cropBox.height;\n      var left = cropBox.left;\n      var top = cropBox.top;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = container.width;\n      var maxHeight = container.height;\n      var renderable = true;\n      var offset;\n      var range;\n\n      // Locking aspect ratio in \"free mode\" by holding shift key (#259)\n      if (!aspectRatio && shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.isLimited) {\n        minLeft = cropBox.minLeft;\n        minTop = cropBox.minTop;\n        maxWidth = minLeft + min(container.width, canvas.left + canvas.width);\n        maxHeight = minTop + min(container.height, canvas.top + canvas.height);\n      }\n\n      range = {\n        x: this.endX - this.startX,\n        y: this.endY - this.startY\n      };\n\n      if (aspectRatio) {\n        range.X = range.y * aspectRatio;\n        range.Y = range.x / aspectRatio;\n      }\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n\n        // Resize crop box\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top -= range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left -= range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += range.X;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        // Move canvas\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n\n        // Zoom canvas\n        case ACTION_ZOOM:\n          this.zoom((function (x1, y1, x2, y2) {\n            var z1 = sqrt(x1 * x1 + y1 * y1);\n            var z2 = sqrt(x2 * x2 + y2 * y2);\n\n            return (z2 - z1) / z1;\n          })(\n            abs(this.startX - this.startX2),\n            abs(this.startY - this.startY2),\n            abs(this.endX - this.endX2),\n            abs(this.endY - this.endY2)\n          ), event);\n          this.startX2 = this.endX2;\n          this.startY2 = this.endY2;\n          renderable = false;\n          break;\n\n        // Create crop box\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = this.$cropper.offset();\n          left = this.startX - offset.left;\n          top = this.startY - offset.top;\n          width = cropBox.minWidth;\n          height = cropBox.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          }\n\n          // Show the crop box if is hidden\n          if (!this.isCropped) {\n            this.$cropBox.removeClass(CLASS_HIDDEN);\n            this.isCropped = true;\n\n            if (this.isLimited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        // No default\n      }\n\n      if (renderable) {\n        cropBox.width = width;\n        cropBox.height = height;\n        cropBox.left = left;\n        cropBox.top = top;\n        this.action = action;\n\n        this.renderCropBox();\n      }\n\n      // Override\n      this.startX = this.endX;\n      this.startY = this.endY;\n    },\n\n    // Show the crop box manually\n    crop: function () {\n      if (!this.isBuilt || this.isDisabled) {\n        return;\n      }\n\n      if (!this.isCropped) {\n        this.isCropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n\n        this.$cropBox.removeClass(CLASS_HIDDEN);\n      }\n\n      this.setCropBoxData(this.initialCropBox);\n    },\n\n    // Reset the image and crop box to their initial states\n    reset: function () {\n      if (!this.isBuilt || this.isDisabled) {\n        return;\n      }\n\n      this.image = $.extend({}, this.initialImage);\n      this.canvas = $.extend({}, this.initialCanvas);\n      this.cropBox = $.extend({}, this.initialCropBox);\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    // Clear the crop box\n    clear: function () {\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      $.extend(this.cropBox, {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      });\n\n      this.isCropped = false;\n      this.renderCropBox();\n\n      this.limitCanvas(true, true);\n\n      // Render canvas after crop box rendered\n      this.renderCanvas();\n\n      this.$dragBox.removeClass(CLASS_MODAL);\n      this.$cropBox.addClass(CLASS_HIDDEN);\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     *\n     * @param {String} url\n     * @param {Boolean} onlyColorChanged (optional)\n     */\n    replace: function (url, onlyColorChanged) {\n      if (!this.isDisabled && url) {\n        if (this.isImg) {\n          this.$element.attr('src', url);\n        }\n\n        if (onlyColorChanged) {\n          this.url = url;\n          this.$clone.attr('src', url);\n\n          if (this.isBuilt) {\n            this.$preview.find('img').add(this.$clone2).attr('src', url);\n          }\n        } else {\n          if (this.isImg) {\n            this.isReplaced = true;\n          }\n\n          // Clear previous data\n          this.options.data = null;\n          this.load(url);\n        }\n      }\n    },\n\n    // Enable (unfreeze) the cropper\n    enable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = false;\n        this.$cropper.removeClass(CLASS_DISABLED);\n      }\n    },\n\n    // Disable (freeze) the cropper\n    disable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = true;\n        this.$cropper.addClass(CLASS_DISABLED);\n      }\n    },\n\n    // Destroy the cropper and remove the instance from the image\n    destroy: function () {\n      var $this = this.$element;\n\n      if (this.isLoaded) {\n        if (this.isImg && this.isReplaced) {\n          $this.attr('src', this.originalUrl);\n        }\n\n        this.unbuild();\n        $this.removeClass(CLASS_HIDDEN);\n      } else {\n        if (this.isImg) {\n          $this.off(EVENT_LOAD, this.start);\n        } else if (this.$clone) {\n          this.$clone.remove();\n        }\n      }\n\n      $this.removeData(NAMESPACE);\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     *\n     * @param {Number} offsetX\n     * @param {Number} offsetY (optional)\n     */\n    move: function (offsetX, offsetY) {\n      var canvas = this.canvas;\n\n      this.moveTo(\n        isUndefined(offsetX) ? offsetX : canvas.left + num(offsetX),\n        isUndefined(offsetY) ? offsetY : canvas.top + num(offsetY)\n      );\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     *\n     * @param {Number} x\n     * @param {Number} y (optional)\n     */\n    moveTo: function (x, y) {\n      var canvas = this.canvas;\n      var isChanged = false;\n\n      // If \"y\" is not present, its default value is \"x\"\n      if (isUndefined(y)) {\n        y = x;\n      }\n\n      x = num(x);\n      y = num(y);\n\n      if (this.isBuilt && !this.isDisabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvas.left = x;\n          isChanged = true;\n        }\n\n        if (isNumber(y)) {\n          canvas.top = y;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderCanvas(true);\n        }\n      }\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     *\n     * @param {Number} ratio\n     * @param {jQuery Event} _event (private)\n     */\n    zoom: function (ratio, _event) {\n      var canvas = this.canvas;\n\n      ratio = num(ratio);\n\n      if (ratio < 0) {\n        ratio =  1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      this.zoomTo(canvas.width * ratio / canvas.naturalWidth, _event);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     *\n     * @param {Number} ratio\n     * @param {jQuery Event} _event (private)\n     */\n    zoomTo: function (ratio, _event) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var width = canvas.width;\n      var height = canvas.height;\n      var naturalWidth = canvas.naturalWidth;\n      var naturalHeight = canvas.naturalHeight;\n      var originalEvent;\n      var newWidth;\n      var newHeight;\n      var offset;\n      var center;\n\n      ratio = num(ratio);\n\n      if (ratio >= 0 && this.isBuilt && !this.isDisabled && options.zoomable) {\n        newWidth = naturalWidth * ratio;\n        newHeight = naturalHeight * ratio;\n\n        if (_event) {\n          originalEvent = _event.originalEvent;\n        }\n\n        if (this.trigger(EVENT_ZOOM, {\n          originalEvent: originalEvent,\n          oldRatio: width / naturalWidth,\n          ratio: newWidth / naturalWidth\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        if (originalEvent) {\n          offset = this.$cropper.offset();\n          center = originalEvent.touches ? getTouchesCenter(originalEvent.touches) : {\n            pageX: _event.pageX || originalEvent.pageX || 0,\n            pageY: _event.pageY || originalEvent.pageY || 0\n          };\n\n          // Zoom from the triggering point of the event\n          canvas.left -= (newWidth - width) * (\n            ((center.pageX - offset.left) - canvas.left) / width\n          );\n          canvas.top -= (newHeight - height) * (\n            ((center.pageY - offset.top) - canvas.top) / height\n          );\n        } else {\n\n          // Zoom from the center of the canvas\n          canvas.left -= (newWidth - width) / 2;\n          canvas.top -= (newHeight - height) / 2;\n        }\n\n        canvas.width = newWidth;\n        canvas.height = newHeight;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     *\n     * @param {Number} degree\n     */\n    rotate: function (degree) {\n      this.rotateTo((this.image.rotate || 0) + num(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n     *\n     * @param {Number} degree\n     */\n    rotateTo: function (degree) {\n      degree = num(degree);\n\n      if (isNumber(degree) && this.isBuilt && !this.isDisabled && this.options.rotatable) {\n        this.image.rotate = degree % 360;\n        this.isRotated = true;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Scale the image\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n     *\n     * @param {Number} scaleX\n     * @param {Number} scaleY (optional)\n     */\n    scale: function (scaleX, scaleY) {\n      var image = this.image;\n      var isChanged = false;\n\n      // If \"scaleY\" is not present, its default value is \"scaleX\"\n      if (isUndefined(scaleY)) {\n        scaleY = scaleX;\n      }\n\n      scaleX = num(scaleX);\n      scaleY = num(scaleY);\n\n      if (this.isBuilt && !this.isDisabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          image.scaleX = scaleX;\n          isChanged = true;\n        }\n\n        if (isNumber(scaleY)) {\n          image.scaleY = scaleY;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderImage(true);\n        }\n      }\n    },\n\n    /**\n     * Scale the abscissa of the image\n     *\n     * @param {Number} scaleX\n     */\n    scaleX: function (scaleX) {\n      var scaleY = this.image.scaleY;\n\n      this.scale(scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the ordinate of the image\n     *\n     * @param {Number} scaleY\n     */\n    scaleY: function (scaleY) {\n      var scaleX = this.image.scaleX;\n\n      this.scale(isNumber(scaleX) ? scaleX : 1, scaleY);\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     *\n     * @param {Boolean} isRounded (optional)\n     * @return {Object} data\n     */\n    getData: function (isRounded) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var ratio;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          x: cropBox.left - canvas.left,\n          y: cropBox.top - canvas.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n\n        ratio = image.width / image.naturalWidth;\n\n        $.each(data, function (i, n) {\n          n = n / ratio;\n          data[i] = isRounded ? round(n) : n;\n        });\n\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = image.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = image.scaleX || 1;\n        data.scaleY = image.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     *\n     * @param {Object} data\n     */\n    setData: function (data) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBoxData = {};\n      var isRotated;\n      var isScaled;\n      var ratio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== image.rotate) {\n            image.rotate = data.rotate;\n            this.isRotated = isRotated = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== image.scaleX) {\n            image.scaleX = data.scaleX;\n            isScaled = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== image.scaleY) {\n            image.scaleY = data.scaleY;\n            isScaled = true;\n          }\n        }\n\n        if (isRotated) {\n          this.renderCanvas();\n        } else if (isScaled) {\n          this.renderImage();\n        }\n\n        ratio = image.width / image.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvas.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvas.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n    },\n\n    /**\n     * Get the container size data\n     *\n     * @return {Object} data\n     */\n    getContainerData: function () {\n      return this.isBuilt ? this.container : {};\n    },\n\n    /**\n     * Get the image position and size data\n     *\n     * @return {Object} data\n     */\n    getImageData: function () {\n      return this.isLoaded ? this.image : {};\n    },\n\n    /**\n     * Get the canvas position and size data\n     *\n     * @return {Object} data\n     */\n    getCanvasData: function () {\n      var canvas = this.canvas;\n      var data = {};\n\n      if (this.isBuilt) {\n        $.each([\n          'left',\n          'top',\n          'width',\n          'height',\n          'naturalWidth',\n          'naturalHeight'\n        ], function (i, n) {\n          data[n] = canvas[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCanvasData: function (data) {\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvas.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvas.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvas.width = data.width;\n          canvas.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvas.height = data.height;\n          canvas.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Get the crop box position and size data\n     *\n     * @return {Object} data\n     */\n    getCropBoxData: function () {\n      var cropBox = this.cropBox;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          left: cropBox.left,\n          top: cropBox.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCropBoxData: function (data) {\n      var cropBox = this.cropBox;\n      var aspectRatio = this.options.aspectRatio;\n      var isWidthChanged;\n      var isHeightChanged;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.isBuilt && this.isCropped && !this.isDisabled && $.isPlainObject(data)) {\n\n        if (isNumber(data.left)) {\n          cropBox.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBox.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          isWidthChanged = true;\n          cropBox.width = data.width;\n        }\n\n        if (isNumber(data.height)) {\n          isHeightChanged = true;\n          cropBox.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (isWidthChanged) {\n            cropBox.height = cropBox.width / aspectRatio;\n          } else if (isHeightChanged) {\n            cropBox.width = cropBox.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n    },\n\n    /**\n     * Get a canvas drawn the cropped image\n     *\n     * @param {Object} options (optional)\n     * @return {HTMLCanvasElement} canvas\n     */\n    getCroppedCanvas: function (options) {\n      var originalWidth;\n      var originalHeight;\n      var canvasWidth;\n      var canvasHeight;\n      var scaledWidth;\n      var scaledHeight;\n      var scaledRatio;\n      var aspectRatio;\n      var canvas;\n      var context;\n      var data;\n\n      if (!this.isBuilt || !SUPPORT_CANVAS) {\n        return;\n      }\n\n      if (!this.isCropped) {\n        return getSourceCanvas(this.$clone[0], this.image);\n      }\n\n      if (!$.isPlainObject(options)) {\n        options = {};\n      }\n\n      data = this.getData();\n      originalWidth = data.width;\n      originalHeight = data.height;\n      aspectRatio = originalWidth / originalHeight;\n\n      if ($.isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      }\n\n      // The canvas element will use `Math.floor` on a float number, so floor first\n      canvasWidth = floor(scaledWidth || originalWidth);\n      canvasHeight = floor(scaledHeight || originalHeight);\n\n      canvas = $('<canvas>')[0];\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      context = canvas.getContext('2d');\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      context.drawImage.apply(context, (function () {\n        var source = getSourceCanvas(this.$clone[0], this.image);\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        var canvas = this.canvas;\n        var params = [source];\n\n        // Source canvas\n        var srcX = data.x + canvas.naturalWidth * (abs(data.scaleX || 1) - 1) / 2;\n        var srcY = data.y + canvas.naturalHeight * (abs(data.scaleY || 1) - 1) / 2;\n        var srcWidth;\n        var srcHeight;\n\n        // Destination canvas\n        var dstX;\n        var dstY;\n        var dstWidth;\n        var dstHeight;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);\n        }\n\n        // All the numerical parameters should be integer for `drawImage` (#476)\n        params.push(floor(srcX), floor(srcY), floor(srcWidth), floor(srcHeight));\n\n        // Scale destination sizes\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        }\n\n        // Avoid \"IndexSizeError\" in IE and Firefox\n        if (dstWidth > 0 && dstHeight > 0) {\n          params.push(floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));\n        }\n\n        return params;\n      }).call(this));\n\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box\n     *\n     * @param {Number} aspectRatio\n     */\n    setAspectRatio: function (aspectRatio) {\n      var options = this.options;\n\n      if (!this.isDisabled && !isUndefined(aspectRatio)) {\n\n        // 0 -> NaN\n        options.aspectRatio = max(0, aspectRatio) || NaN;\n\n        if (this.isBuilt) {\n          this.initCropBox();\n\n          if (this.isCropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n    },\n\n    /**\n     * Change the drag mode\n     *\n     * @param {String} mode (optional)\n     */\n    setDragMode: function (mode) {\n      var options = this.options;\n      var croppable;\n      var movable;\n\n      if (this.isLoaded && !this.isDisabled) {\n        croppable = mode === ACTION_CROP;\n        movable = options.movable && mode === ACTION_MOVE;\n        mode = (croppable || movable) ? mode : ACTION_NONE;\n\n        this.$dragBox.\n          data(DATA_ACTION, mode).\n          toggleClass(CLASS_CROP, croppable).\n          toggleClass(CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n\n          // Sync drag mode to crop box when it is not movable(#300)\n          this.$face.\n            data(DATA_ACTION, mode).\n            toggleClass(CLASS_CROP, croppable).\n            toggleClass(CLASS_MOVE, movable);\n        }\n      }\n    }\n  };\n\n  Cropper.DEFAULTS = {\n\n    // Define the view mode of the cropper\n    viewMode: 0, // 0, 1, 2, 3\n\n    // Define the dragging mode of the cropper\n    dragMode: 'crop', // 'crop', 'move' or 'none'\n\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n\n    // An object with the previous cropping result data\n    data: null,\n\n    // A jQuery selector for adding extra containers to preview\n    preview: '',\n\n    // Re-render the cropper when resize the window\n    responsive: true,\n\n    // Restore the cropped area after resize the window\n    restore: true,\n\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n\n    // Show the black modal\n    modal: true,\n\n    // Show the dashed lines for guiding\n    guides: true,\n\n    // Show the center indicator for guiding\n    center: true,\n\n    // Show the white modal to highlight the crop box\n    highlight: true,\n\n    // Show the grid background\n    background: true,\n\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n\n    // Enable to move the image\n    movable: true,\n\n    // Enable to rotate the image\n    rotatable: true,\n\n    // Enable to scale the image\n    scalable: true,\n\n    // Enable to zoom the image\n    zoomable: true,\n\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n\n    // Enable to move the crop box\n    cropBoxMovable: true,\n\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n\n    // Shortcuts of events\n    build: null,\n    built: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  Cropper.setDefaults = function (options) {\n    $.extend(Cropper.DEFAULTS, options);\n  };\n\n  Cropper.TEMPLATE = (\n    '<div class=\"cropper-container\">' +\n      '<div class=\"cropper-wrap-box\">' +\n        '<div class=\"cropper-canvas\"></div>' +\n      '</div>' +\n      '<div class=\"cropper-drag-box\"></div>' +\n      '<div class=\"cropper-crop-box\">' +\n        '<span class=\"cropper-view-box\"></span>' +\n        '<span class=\"cropper-dashed dashed-h\"></span>' +\n        '<span class=\"cropper-dashed dashed-v\"></span>' +\n        '<span class=\"cropper-center\"></span>' +\n        '<span class=\"cropper-face\"></span>' +\n        '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' +\n        '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' +\n        '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' +\n        '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' +\n      '</div>' +\n    '</div>'\n  );\n\n  // Save the other cropper\n  Cropper.other = $.fn.cropper;\n\n  // Register as jQuery plugin\n  $.fn.cropper = function (option) {\n    var args = toArray(arguments, 1);\n    var result;\n\n    this.each(function () {\n      var $this = $(this);\n      var data = $this.data(NAMESPACE);\n      var options;\n      var fn;\n\n      if (!data) {\n        if (/destroy/.test(option)) {\n          return;\n        }\n\n        options = $.extend({}, $this.data(), $.isPlainObject(option) && option);\n        $this.data(NAMESPACE, (data = new Cropper(this, options)));\n      }\n\n      if (typeof option === 'string' && $.isFunction(fn = data[option])) {\n        result = fn.apply(data, args);\n      }\n    });\n\n    return isUndefined(result) ? this : result;\n  };\n\n  $.fn.cropper.Constructor = Cropper;\n  $.fn.cropper.setDefaults = Cropper.setDefaults;\n\n  // No conflict\n  $.fn.cropper.noConflict = function () {\n    $.fn.cropper = Cropper.other;\n    return this;\n  };\n\n});\n","/**\n * Created by jong on 7/29/15.\n */\n\nvar ILabCrop=function($,settings){\n    this.settings=settings;\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.cropper=this.modalContainer.find('.ilabc-cropper');\n    this.cropperData={};\n    this.modal_id=settings.modal_id;\n\n    var cropRef=this;\n    var resizeTimerId;\n    var isResizing=false;\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: this.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                cropRef.bindUI(response);\n            });\n        }\n    });\n\n    $(window).resize(function() {\n        if (!isResizing)\n        {\n            data=cropRef.cropper.cropper('getData');\n            cropRef.settings.prev_crop_x=data.x;\n            cropRef.settings.prev_crop_y=data.y;\n            cropRef.settings.prev_crop_width=data.width;\n            cropRef.settings.prev_crop_height=data.height;\n        }\n\n        isResizing=true;\n        cropRef.updatePreviewWidth();\n        clearTimeout(resizeTimerId);\n        resizeTimerId = setTimeout(cropRef._resized, 250);\n    });\n\n\n    this.modalContainer.find('.ilabc-button-crop').on('click',function(e){\n        e.preventDefault();\n        cropRef.crop();\n        return false;\n    });\n\n    this._resized=function(){\n        cropRef.bindUI(cropRef.settings);\n        isResizing=false;\n    };\n\n    this.updatePreviewWidth=function() {\n        var width =  this.modalContainer.find('.ilab-crop-preview-title').width();\n        this.modalContainer.find('.ilab-crop-preview').css({\n            'height' : (width / cropRef.settings.aspect_ratio) + 'px',\n            'width' : width + 'px'\n        });\n    };\n\n    this.bindUI=function(settings){\n        this.settings=settings;\n\n        this.cropper.cropper('destroy');\n        this.cropper.off('built.cropper');\n\n        if (settings.hasOwnProperty('cropped_src') && settings.cropped_src !== null)\n        {\n            this.modalContainer.find('.ilab-current-crop-img').attr('src',settings.cropped_src);\n        }\n\n        if (settings.hasOwnProperty('size_title') && (settings.size_title !== null))\n        {\n            this.modalContainer.find('.ilabc-crop-size-title').text(\"Current \"+settings.size_title+\" (\"+settings.min_width+\" x \"+settings.min_height+\")\");\n        }\n\n        if (typeof settings.aspect_ratio !== 'undefined')\n        {\n            this.updatePreviewWidth();\n\n            if ((typeof settings.prev_crop_x !== 'undefined') && (settings.prev_crop_x !== null)) {\n                this.cropperData = {\n                    x : settings.prev_crop_x,\n                    y : settings.prev_crop_y,\n                    width : settings.prev_crop_width,\n                    height : settings.prev_crop_height\n                };\n            }\n\n            this.cropper.on('built.cropper',function(){\n                cropRef.updatePreviewWidth();\n            }).on('crop.cropper',function(e){\n                //console.log(e.x, e.y, e.width, e.height);\n            }).cropper({\n                viewMode: 1,\n                aspectRatio : settings.aspect_ratio,\n                minWidth : settings.min_width,\n                minHeight : settings.min_height,\n                modal : true,\n                zoomable: false,\n                mouseWheelZoom: false,\n                dragCrop: false,\n                autoCropArea: 1,\n                movable: false,\n                data : this.cropperData,\n                checkImageOrigin: false,\n                checkCrossOrigin: false,\n                responsive: true,\n                preview: '#ilabm-container-'+this.modal_id+' .ilab-crop-preview'\n            });\n        }\n    };\n\n    this.crop=function(){\n        var cropRef=this;\n\n        this.displayStatus('Saving crop ...');\n\n        var data = this.cropper.cropper('getData');\n        data['action'] = 'ilab_perform_crop';\n        data['post'] = this.settings.image_id;\n        data['size'] = this.settings.size;\n        jQuery.post(ajaxurl, data, function(response) {\n            if (response.status=='ok') {\n                cropRef.modalContainer.find('.ilab-current-crop-img').one('load',function(){\n                   cropRef.hideStatus();\n                });\n                cropRef.modalContainer.find('.ilab-current-crop-img').attr('src', response.src);\n            }\n            else\n                cropRef.hideStatus();\n        });\n    };\n\n    this.displayStatus=function(message){\n        cropRef.modalContainer.find('.ilabm-status-label').text(message);\n        cropRef.modalContainer.find('.ilabm-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        cropRef.modalContainer.find('.ilabm-status-container').addClass('is-hidden');\n    };\n\n    this.bindUI(settings);\n};\n","/**\n * Created by jong on 8/8/15.\n */\n\nvar ImgixComponents=(function(){\n    var byteToHex=function(byte) {\n        var hexChar = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n        return hexChar[(byte >> 4) & 0x0f] + hexChar[byte & 0x0f];\n    };\n\n    return {\n        utilities: {\n          byteToHex:byteToHex\n      }\n    };\n})();","(function($){\n\n    $.fn.imgixLabel=function(options){\n        var settings= $.extend({},options);\n\n        return this.each(function(){\n            var label=$(this);\n\n            var changeTimerId;\n\n            var currentVal=0;\n\n            var textInput=$('<input type=\"text\" class=\"imgix-label-editor is-hidden\" pattern=\"[0-9-]+\">');\n            label.parent().append(textInput);\n\n            textInput.on('keydown',function(e){\n                if (e.keyCode==27) {\n                    textInput.off('blur');\n                    textInput.off('input');\n\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(currentVal);\n\n                    label.text(currentVal);\n                }\n                else if (e.keyCode==13) {\n                    textInput.off('blur');\n                    textInput.off('input');\n\n                    var val=parseInt(textInput.val());\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n\n                    label.text(val);\n                }\n                else if (e.keyCode==38) {\n                    var val=parseInt(textInput.val());\n                    val++;\n                    textInput.val(val);\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n                    label.text(val);\n                }\n                else if (e.keyCode==40) {\n                    var val=parseInt(textInput.val());\n                    val--;\n                    textInput.val(val);\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n                    label.text(val);\n\n                }\n                else {\n                    if (e.keyCode<57)\n                        return true;\n                    else if ((e.keyCode>90) && (e.keyCode<105))\n                        return true;\n                    else if (e.keyCode==109)\n                        return true;\n                    else if (e.metaKey)\n                        return true;\n\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            label.on('click',function(e){\n                e.preventDefault();\n\n                textInput.on('input',function(){\n                    var val=parseInt(textInput.val());\n                    if (settings.hasOwnProperty('changed'))\n                    {\n                        clearTimeout(changeTimerId);\n                        changeTimerId = setTimeout(function(){\n                            settings.changed(val);\n                        }, 500);\n                    }\n\n                    label.text(val);\n                });\n\n                textInput.on('blur',function(){\n                    var val=parseInt(textInput.val());\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n\n                    label.text(val);\n                });\n\n                currentVal=(settings.hasOwnProperty('currentValue')) ? settings.currentValue() : 0;\n                textInput.val(currentVal);\n                textInput.removeClass('is-hidden');\n                textInput.select();\n                textInput.focus();\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixSlider=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.valueLabel=container.find('.imgix-param-title-right > h3');\n        this.slider=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var sliderRef=this;\n\n        this.container.find('.imgix-param-label').imgixLabel({\n            currentValue:function(){\n                return sliderRef.slider.val();\n            },\n            changed:function(newVal){\n                if (newVal==sliderRef.slider.val())\n                    return;\n\n                sliderRef.slider.val(newVal);\n                sliderRef.slider.hide().show(0);\n                sliderRef.delegate.preview();\n            }\n        });\n\n        this.resetButton.on('click',function(){\n            sliderRef.reset();\n        });\n\n        this.slider.on('input',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n        });\n\n        this.slider.on('change',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n            sliderRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixSlider.prototype.destroy=function() {\n        this.slider.off('input');\n        this.slider.off('change');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixSlider.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        this.valueLabel.text(val);\n        this.slider.val(val);\n        this.slider.hide().show(0);\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixSlider.prototype.saveValue=function(data) {\n        if (this.slider.val()!=this.defaultValue)\n            data[this.param]=this.slider.val();\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixColor=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.colorPicker=container.find('.imgix-param-color');\n        this.alphaSlider=container.find('.imgix-param-alpha');\n        this.type=container.data('param-type');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.param=container.data('param');\n        this.defaultValue=container.data('default-value');\n\n        var colorPickerRef=this;\n\n        if (this.type=='blend-color') {\n            this.blendParam=container.data('blend-param');\n            this.blendSelect = container.find('.imgix-param-blend');\n\n            var currentBlend=container.data('blend-value');\n            this.blendSelect.val(currentBlend);\n\n            this.blendSelect.on('change',function(){\n                colorPickerRef.delegate.preview();\n            });\n        }\n\n        this.colorPicker.wpColorPicker({\n            palettes: false,\n            change: function(event, ui) {\n                colorPickerRef.delegate.preview();\n            }\n        });\n\n        this.alphaSlider.on('change',function(){\n            colorPickerRef.delegate.preview();\n        });\n\n        this.resetButton.on('click',function(){\n            colorPickerRef.reset();\n        });\n    };\n\n    ImgixComponents.ImgixColor.prototype.destroy=function() {\n        this.alphaSlider.off('change');\n        if (this.type=='blend-color') {\n            this.blendSelect.off('change');\n        }\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixColor.prototype.reset=function(data) {\n        var blend='none';\n        var val;\n\n        if ((data !== undefined) && data.hasOwnProperty(this.blendParam))\n        {\n            blend=data[this.blendParam];\n        }\n\n        if ((data !== undefined) && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n        }\n        else\n            val=this.defaultValue;\n\n        val=val.replace('#','');\n        if (val.length==8)\n        {\n            var alpha=(parseInt('0x'+val.substring(0,2))/255.0)*100.0;\n            val=val.substring(2);\n\n            this.alphaSlider.val(Math.round(alpha));\n            this.alphaSlider.hide().show(0);\n        } else {\n            this.alphaSlider.val(0);\n            this.alphaSlider.hide().show(0);\n        }\n\n        this.colorPicker.val('#'+val);\n        this.colorPicker.wpColorPicker('color', '#'+val);\n\n        if (this.type=='blend-color') {\n            this.blendSelect.val(blend);\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixColor.prototype.saveValue=function(data) {\n        if (this.alphaSlider.val()>0) {\n            data[this.param] = '#' + ImgixComponents.utilities.byteToHex(Math.round((parseFloat(this.alphaSlider.val()) / 100.0) * 255.0)) + this.colorPicker.val().replace('#', '');\n\n            if (this.type == 'blend-color') {\n                if (this.blendSelect.val()!='none') {\n                    data[this.blendParam] = this.blendSelect.val();\n                }\n            }\n        }\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixAlignment=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.alignmentParam=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var alignmentRef=this;\n\n        this.resetButton.on('click',function(){\n            alignmentRef.reset();\n        });\n\n        container.find('.imgix-alignment-button').on('click',function(){\n            var button=$(this);\n            alignmentRef.container.find('.imgix-alignment-button').each(function(){\n                $(this).removeClass('selected-alignment');\n            });\n\n            button.addClass('selected-alignment');\n            alignmentRef.alignmentParam.val(button.data('param-value'));\n            alignmentRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.destroy=function() {\n        this.resetButton.off('click');\n        this.container.find('.imgix-alignment-button').off('click');\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        if (val=='')\n            val=this.defaultValue;\n\n        this.container.find('.imgix-alignment-button').each(function(){\n            var button=$(this);\n            if (button.data('param-value')==val)\n                button.addClass('selected-alignment');\n            else\n                button.removeClass('selected-alignment');\n        });\n\n        this.alignmentParam.val(val);\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.saveValue=function(data) {\n        if (this.alignmentParam.val()!=this.defaultValue)\n            data[this.param]=this.alignmentParam.val();\n\n        return data;\n    };\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixMediaChooser=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.preview=container.find('.imgix-media-preview img');\n        this.mediaInput=container.find('.imgix-param');\n        this.selectButton=container.find('.imgix-media-button');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        this.uploader=wp.media({\n            title: 'Select Watermark',\n            button: {\n                text: 'Select Watermark'\n            },\n            multiple: false\n        });\n\n        var mediaRef=this;\n\n        this.resetButton.on('click',function(){\n            mediaRef.reset();\n        });\n\n        this.uploader.on('select', function() {\n            attachment = mediaRef.uploader.state().get('selection').first().toJSON();\n            mediaRef.mediaInput.val(attachment.id);\n            mediaRef.preview.attr('src',attachment.url);\n\n            mediaRef.delegate.preview();\n        });\n\n        this.selectButton.on('click',function(e){\n            e.preventDefault();\n            mediaRef.uploader.open();\n            return false;\n        });\n\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.destroy=function() {\n        this.selectButton.off('click');\n        this.uploader.off('select');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n            this.mediaInput.val(val);\n        }\n        else\n            this.mediaInput.val('');\n\n        if (data && data.hasOwnProperty(this.param+'_url'))\n        {\n            this.preview.attr('src',data[this.param+'_url']);\n        }\n        else\n        {\n            this.preview.removeAttr('src').replaceWith(this.preview.clone());\n            this.preview=this.container.find('.imgix-media-preview img');\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.saveValue=function(data) {\n        var val=this.mediaInput.val();\n\n        if (val && val!='')\n            data[this.param]=val;\n\n        return data;\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixPillbox=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.param=container.data('param');\n        this.values=container.data('param-values').split(',');\n        this.buttons=container.find('.ilabm-pill');\n        this.inputs={};\n\n        var pillboxRef=this;\n\n        this.buttons.each(function(){\n            var button=$(this);\n            var valueName=button.data('param');\n            pillboxRef.inputs[valueName]=pillboxRef.container.find(\"input[name='\"+valueName+\"']\");\n            button.on('click',function(e){\n                e.preventDefault();\n\n                if (pillboxRef.inputs[valueName].val()==0)\n                {\n                    pillboxRef.inputs[valueName].val(1);\n                    button.addClass('pill-selected');\n                }\n                else\n                {\n                    pillboxRef.inputs[valueName].val(0);\n                    button.removeClass('pill-selected');\n                }\n\n                pillboxRef.delegate.preview();\n\n                return false;\n            });\n        });\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.destroy=function() {\n        this.buttons.off('click');\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.reset=function(data) {\n        this.buttons.each(function(){\n           $(this).removeClass('pill-selected');\n        });\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            pillboxRef.inputs[key].val(0);\n        });\n\n        if (data && data.hasOwnProperty(this.param)) {\n            var val = data[this.param].split(',');\n\n\n            val.forEach(function (key, index) {\n                pillboxRef.inputs[key].val(1);\n                pillboxRef.container.find('imgix-pill-' + key).addClass('pill-selected');\n            });\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.saveValue=function(data) {\n        var vals=[];\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            if (pillboxRef.inputs[key].val()==1)\n                vals.push(key);\n        });\n\n        if (vals.length>0)\n            data[this.param]=vals.join(',');\n\n        return data;\n    };\n\n}(jQuery));\n","/**\n * Created by jong on 8/9/15.\n */\n\nvar ILabImgixPresets=function($,delegate,container) {\n\n    this.delegate=delegate;\n    this.container=container.find('.ilabm-bottom-bar');\n    this.presetSelect=this.container.find('.imgix-presets');\n    this.presetContainer=this.container.find('.imgix-preset-container');\n    this.presetDefaultCheckbox=this.container.find('.imgix-preset-make-default');\n\n    var self=this;\n\n    self.presetSelect.on('change',function(){\n        if (self.presetSelect.val==0)\n        {\n            self.delegate.resetAll();\n            self.presetDefaultCheckbox.prop('checked',false);\n            return;\n        }\n\n        var preset=self.delegate.settings.presets[self.presetSelect.val()];\n        if (preset.default_for==self.delegate.settings.size)\n            self.presetDefaultCheckbox.prop('checked',true);\n\n        self.delegate.bindPreset(preset);\n    });\n\n    this.container.find('.imgix-new-preset-button').on('click',function(){\n        self.newPreset();\n    });\n\n    this.container.find('.imgix-save-preset-button').on('click',function(){\n        self.savePreset();\n    });\n\n    this.container.find('.imgix-delete-preset-button').on('click',function(){\n        self.deletePreset();\n    });\n\n    this.init=function() {\n        self.presetSelect.find('option').remove();\n\n        if (Object.keys(self.delegate.settings.presets).length==0)\n        {\n            self.presetContainer.addClass('is-hidden');\n        }\n        else\n        {\n            Object.keys(self.delegate.settings.presets).forEach(function(key,index) {\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",'0')\n                    .text('None'));\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",key)\n                    .text(self.delegate.settings.presets[key].title));\n            });\n\n            self.presetContainer.removeClass('is-hidden');\n            self.presetSelect.val(self.delegate.settings.currentPreset);\n        }\n    };\n\n    this.clearSelected=function(){\n        self.presetSelect.val(0);\n        self.presetDefaultCheckbox.prop('checked',false);\n    };\n\n    this.setCurrentPreset=function(preset, is_default){\n        if (is_default)\n            self.presetDefaultCheckbox.prop('checked',true);\n        else\n            self.presetDefaultCheckbox.prop('checked',false);\n\n        self.presetSelect.val(preset);\n    };\n\n    this.newPreset=function(){\n        var name=prompt(\"New preset name\");\n        if (name!=null)\n        {\n            self.delegate.displayStatus('Saving preset ...');\n\n            var data={};\n            data['name']=name;\n            if (self.presetDefaultCheckbox.is(':checked'))\n                data['make_default']=1;\n\n            self.delegate.postAjax('ilab_imgix_new_preset', data, function(response) {\n                self.delegate.hideStatus();\n                if (response.status=='ok')\n                {\n                    self.delegate.settings.currentPreset=response.currentPreset;\n                    self.delegate.settings.presets=response.presets;\n\n                    self.init();\n                }\n            });\n        }\n    };\n\n    this.savePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        self.delegate.displayStatus('Saving preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n        if (self.presetDefaultCheckbox.is(':checked'))\n            data['make_default']=1;\n\n        self.delegate.postAjax('ilab_imgix_save_preset', data, function(response) {\n            self.delegate.hideStatus();\n        });\n    };\n\n    this.deletePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        if (!confirm(\"Are you sure you want to delete this preset?\"))\n            return;\n\n        self.delegate.displayStatus('Delete preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n\n        self.delegate.postAjax('ilab_imgix_delete_preset', data, function(response) {\n            self.delegate.hideStatus();\n            if (response.status=='ok')\n            {\n                self.delegate.settings.currentPreset=response.currentPreset;\n                self.delegate.settings.presets=response.presets;\n\n                self.init();\n\n                self.delegate.bindUI(response);\n            }\n        });\n    };\n\n    this.init();\n};","(function($){\n\n    $.fn.ilabSidebarTabs=function(options){\n        var settings= $.extend({},options);\n\n        var firstTab=false;\n        return this.find('.ilabm-sidebar-tab').each(function(){\n            var tab=$(this);\n            var target=settings.container.find('.'+tab.data('target'));\n\n            if (!firstTab)\n            {\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                firstTab=true;\n            }\n\n            tab.on('click',function(e){\n                e.preventDefault();\n\n                settings.container.find(\".ilabm-sidebar-tab\").each(function() {\n                    var otherTab = $(this);\n                    var tabTarget = settings.container.find('.' + otherTab.data('target'));\n\n                    otherTab.removeClass('active-tab');\n                    tabTarget.addClass('is-hidden');\n                });\n\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","/**\n * Image Editing Module\n */\n\nvar ILabImageEdit=function($, settings){\n    this.previewTimeout=null;\n    this.previewsSuspended=false;\n    this.parameters=[];\n\n    var self=this;\n\n    this.settings=settings;\n\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.waitModal=this.modalContainer.find('.ilabm-preview-wait-modal');\n    this.previewImage=this.modalContainer.find('.imgix-preview-image');\n\n    this.presets=new ILabImgixPresets($,this,this.modalContainer);\n\n    this.modalContainer.find('.imgix-button-reset-all').on('click',function(){\n        self.resetAll();\n    });\n    this.modalContainer.find('.imgix-button-save-adjustments').on('click',function(){\n        self.apply();\n    });\n\n    this.modalContainer.find('.imgix-parameter').each(function(){\n        var container=$(this);\n        var type=container.data('param-type');\n        if (type=='slider')\n            self.parameters.push(new ImgixComponents.ImgixSlider(self,container));\n        else if ((type=='color') || (type=='blend-color'))\n            self.parameters.push(new ImgixComponents.ImgixColor(self,container));\n        else if (type=='pillbox')\n            self.parameters.push(new ImgixComponents.ImgixPillbox(self,container));\n        else if (type=='media-chooser')\n            self.parameters.push(new ImgixComponents.ImgixMediaChooser(self,container));\n        else if (type=='alignment')\n            self.parameters.push(new ImgixComponents.ImgixAlignment(self,container));\n    });\n\n    this.modalContainer.on('click','.imgix-pill',function(){\n        var paramName=$(this).data('param');\n        var param=self.modalContainer.find('#imgix-param-'+paramName);\n        if (param.val()==1)\n        {\n            param.val(0);\n            $(this).removeClass('pill-selected');\n        }\n        else\n        {\n            param.val(1);\n            $(this).addClass('pill-selected');\n        }\n\n        self.preview();\n    });\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: self.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                self.bindUI(response);\n            });\n        }\n    });\n\n    this.modalContainer.find(\".ilabm-sidebar-tabs\").ilabSidebarTabs({\n        delegate: this,\n        container: this.modalContainer\n    });\n\n    /**\n     * Performs the wordpress ajax post\n     * @param action\n     * @param data\n     * @param callback\n     * @private\n     */\n    this.postAjax=function(action,data,callback){\n        var postData={};\n        self.parameters.forEach(function(value,index){\n            postData=value.saveValue(postData);\n        });\n\n        data['image_id'] = self.settings.image_id;\n        data['action'] = action;\n        data['size'] = self.settings.size;\n        data['settings']=postData;\n\n        $.post(ajaxurl, data, callback);\n    }\n\n    /**\n     * Performs the actual request for a preview to be generated\n     * @private\n     */\n    function _preview(){\n        self.displayStatus('Building preview ...');\n\n        self.waitModal.removeClass('is-hidden');\n\n        self.postAjax('ilab_imgix_preview',{},function(response) {\n            if (response.status=='ok')\n            {\n                var sameSrc = (response.src == self.previewImage.attr('src'));\n                var didLoad = false;\n\n                self.previewImage.on('load',function(){\n                    didLoad = true;\n                    self.waitModal.addClass('is-hidden');\n                    self.hideStatus();\n                });\n\n                self.previewImage.on('error', function(){\n                    didLoad = true;\n                    self.waitModal.addClass('is-hidden');\n                    self.hideStatus();\n                });\n\n                self.previewImage.attr('src',response.src);\n\n                if (sameSrc) {\n                    setTimeout(function(){\n                        if (!didLoad) {\n                            self.waitModal.addClass('is-hidden');\n                            self.hideStatus();\n                        }\n                    }, 3000);\n                }\n            }\n            else\n            {\n                self.waitModal.addClass('is-hidden');\n                self.hideStatus();\n            }\n        });\n    }\n\n    /**\n     * Requests a preview to be generated.\n     */\n    this.preview=function(){\n        if (self.previewsSuspended)\n            return;\n\n        ILabModal.makeDirty();\n\n        clearTimeout(self.previewTimeout);\n        self.previewTimeout=setTimeout(_preview,500);\n    };\n\n    /**\n     * Binds the UI to the json response when selecting a tab or changing a preset\n     * @param data\n     */\n    this.bindUI=function(data){\n        if (data.hasOwnProperty('currentPreset') && (data.currentPreset!=null) && (data.currentPreset!='')) {\n            var p=self.settings.presets[data.currentPreset];\n            self.presets.setCurrentPreset(data.currentPreset,(p.default_for==data.size));\n        }\n        else\n            self.presets.clearSelected();\n\n        self.previewsSuspended=true;\n        self.settings.size=data.size;\n        self.settings.settings=data.settings;\n\n        var rebind=function(){\n            self.previewImage.off('load',rebind);\n            self.parameters.forEach(function(value,index){\n                value.reset(data.settings);\n            });\n\n            self.previewsSuspended=false;\n            ILabModal.makeClean();\n        };\n\n        if (data.src)\n        {\n            self.previewImage.on('load',rebind);\n            self.previewImage.attr('src',data.src);\n        }\n        else\n            rebind();\n    };\n\n    this.bindPreset=function(preset){\n        self.previewsSuspended=true;\n        self.settings.settings=preset.settings;\n\n        self.previewImage.off('load');\n        self.parameters.forEach(function(value,index){\n            value.reset(self.settings.settings);\n        });\n\n        self.previewsSuspended=false;\n        self.preview();\n    };\n\n\n    this.apply=function(){\n        self.displayStatus('Saving adjustments ...');\n\n        self.postAjax('ilab_imgix_save', {}, function(response) {\n            self.hideStatus();\n            ILabModal.makeClean();\n        });\n    };\n\n    /**\n     * Reset all of the values\n     */\n    this.resetAll=function(){\n        self.parameters.forEach(function(value,index){\n            value.reset();\n        });\n    };\n\n    this.displayStatus=function(message){\n        self.modalContainer.find('.ilabm-status-label').text(message);\n        self.modalContainer.find('.ilabm-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        self.modalContainer.find('.ilabm-status-container').addClass('is-hidden');\n    };\n};\n\n"],"sourceRoot":"js/"}