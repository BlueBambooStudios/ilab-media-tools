{"version":3,"sources":["ilab-media-upload.js"],"names":[],"mappings":"AAAA,sCACA,OACA,AACA,mBACA,4BACA,AACA,2CACA,wEACA,yEACA,0EACA,+EACA,yEACA,wEACA,yEACA,AACA,sDACA,AACA,qBACA,OACA,QACA,4BACA,uBACA,0DACA,sCACA,6CACA,qCACA,qDACA,AACA,AACA,mCACA,SACA,MACA,EACA,AACA,sBACA,gBACA,uBACA,iBACA,AACA,kBACA,GACA,MACA,AACA,0BACA,sCACA,kCACA,0CACA,AACA,0DACA,4BACA,MACA,+BACA,iDACA,KACA,+CACA,gCACA,iDACA,MACA,+CACA,gCACA,iDACA,OACA,kDACA,0BACA,0CACA,AACA,IACA,AACA,yBACA,OACA,QACA,oDACA,oDACA,gEACA,sDACA,qDACA,8CACA,gDACA,4CACA,4CACA,WACA,AACA,AACA,gCACA,SACA,wBACA,wCACA,AACA,KACA,EACA,AACA,yBACA,AACA,4CACA,0CACA,KACA,AACA,AACA,qCACA,OACA,AACA,mBACA,qDACA,2DACA,oDACA,2DACA,AACA,gDACA,6CACA,iBACA,oCACA,AACA,uBACA,sBACA,AACA,gCACA,AACA,yDACA,iGACA,AACA,MACA,+CACA,0BACA,+CACA,AACA,0BACA,qDACA,AACA,6CACA,AACA,AACA,AACA,AACA,gDACA,uBACA,uBACA,AACA,6BACA,OACA,QACA,iCACA,AACA,AACA,kCACA,YACA,yBACA,eACA,AACA,0BACA,kDACA,CACA,uBACA,AACA,UACA,AACA,GACA,iDACA,AACA,AACA,cACA,sCACA,AACA,AACA,iBACA,KACA,iCACA,AACA,AACA,sBACA,iCACA,gCACA,cACA,AACA,AACA,iBACA,YACA,cACA,OACA,eACA,eACA,qBACA,sBACA,MAIA,sCAHA,+DACA,KACA,GAEA,oBACA,OACA,QACA,mCACA,AACA,AACA,iCACA,YACA,2BACA,eACA,+BACA,mCACA,AACA,0BACA,wBACA,gBACA,AACA,UACA,0BACA,0BACA,aACA,yEACA,eACA,gBACA,AACA,eACA,KACA,AACA,oBACA,WACA,iBACA,oCACA,0BACA,AACA,AACA,AACA,kBACA,iBACA,AACA,AACA,EACA,kBACA,YACA,oCACA,AACA,sBACA,iBACA,AACA,GACA,QACA,6BACA,AACA,oCACA,AACA,mBACA,EACA,AACA,AACA,AACA,6BACA,2BACA,QACA,uBACA,AACA,oCACA,IACA,+BACA,2BACA,0BACA,sBACA,4DACA,YACA,OACA,AACA,AACA,CAEA,SADA,mBAEA,AACA,EACA,AACA,iCACA,OACA,AACA,aACA,2BACA,4BACA,+BACA,wDACA,sEACA,+DACA,wDACA,+CACA,AACA,0EACA,qBACA,AACA,kCACA,AACA,2BACA,yBACA,AACA,+BACA,+BACA,qDACA,eACA,+BACA,sBACA,AACA,yBACA,UACA,aACA,AACA,AACA,AACA,sCACA,IACA,AACA,iCACA,MACA,AACA,AACA,AACA,yCACA,iBACA,qCACA,AACA,AACA,aACA,AACA,yBACA,QACA,uCACA,AACA,AACA,oCACA,SACA,0BACA,0CACA,+CACA,cACA,GACA,AACA,iCACA,wBACA,YACA,+BACA,AACA,AACA,kBACA,cACA,YACA,AACA,0BACA,YACA,AACA,OACA,WAEA,AACA,AACA,mBAHA,iCAIA,AACA,AACA,QACA,iCACA,AACA,AACA,cACA,6BAEA,AACA,AACA,kCAHA,kCAIA,SACA,OACA,AACA,iBACA,OACA,aAEA,AACA,AACA,mBAHA,sEAIA,OACA,cAEA,AACA,AACA,mBAHA,gDAIA,mCAEA,AACA,mBAFA,sBAGA,UACA,kBACA,aAEA,AACA,AACA,mBAHA,qCAIA,YAEA,AACA,AACA,AACA,mBAJA,oCAKA,CACA,AACA,AACA,AACA,sCACA,4BACA,AACA,uDACA,yBACA,iBACA,oBACA,gBACA,AACA,yDACA,4BACA,iBACA,oBACA,gBACA,AACA,0CACA,4BACA,+CACA,WACA,oDACA,iBACA,QACA,AACA,0CACA,mBACA,OACA,AACA,8CACA,iCACA,yCACA,mBACA,AACA,SACA,AACA,gDACA,CAIA,kCAHA,AACA,SACA,mBAEA,AACA,2CACA,CAMA,SALA,iCACA,AACA,AACA,WACA,mBAEA,AACA,AACA,AACA,AACA,AACA,KACA,+BACA,AACA,AACA,AACA,sEACA","file":"ilab-media-upload.js","sourcesContent":["var ilabAttachmentInfo = function($, uploader, attachmentInfo) {\n    var self = this;\n\n    this.info = $(uploader.attachmentTemplate(attachmentInfo));\n    this.data = attachmentInfo;\n\n    this.attachmentTitle = this.info.find('input[name=\"attachment-title\"]');\n    this.attachmentCaption = this.info.find('textarea[name=\"attachment-caption\"]');\n    this.attachmentAlt = this.info.find('input[name=\"attachment-alt\"]');\n    this.attachmentDescription = this.info.find('textarea[name=\"attachment-description\"]');\n    this.attachmentAlign = this.info.find('select[name=\"attachment-align\"]');\n    this.attachmentLinkURL = this.info.find('input[name=\"attachment-link-url\"]');\n    this.attachmentSize = this.info.find('select[name=\"attachment-size\"]');\n    this.attachmentLinkType = this.info.find('select[name=\"attachment-link-type\"]');\n\n    this.saveToken = null;\n\n    var doSave = function() {\n        var data = {\n            \"action\": \"save-attachment\",\n            \"id\": self.data.id,\n            \"nonce\": self.data.nonces.update,\n            post_id: window.parent.wp.media.model.settings.post.id,\n            \"changes[title]\": self.attachmentTitle.val(),\n            \"changes[caption]\": self.attachmentCaption.val(),\n            \"changes[alt]\": self.attachmentAlt.val(),\n            \"changes[description]\": self.attachmentDescription.val()\n        };\n\n        $.post(ajaxurl, data, function(response){\n           console.log(response);\n        });\n    };\n\n    this.save = function() {\n        clearTimeout(self.saveToken);\n        self.saveToken=setTimeout(doSave, 1000);\n    };\n\n    var handleChange = function(e) {\n        self.save();\n    };\n\n    this.attachmentTitle.on('change', handleChange);\n    this.attachmentCaption.on('change', handleChange);\n    this.attachmentAlt.on('change', handleChange);\n    this.attachmentDescription.on('change', handleChange);\n\n    this.attachmentLinkType.on('change', function(){\n        var v = self.attachmentLinkType.val();\n        if (v == 'none') {\n            self.attachmentLinkURL.css({\"display\": \"display\"});\n            self.attachmentLinkURL.val('');\n        } else if (v == 'file') {\n            self.attachmentLinkURL.prop(\"readonly\", \"readonly\");\n            self.attachmentLinkURL.css({\"display\": \"\"});\n            self.attachmentLinkURL.val(self.data.url);\n        } else if (v == 'post') {\n            self.attachmentLinkURL.prop(\"readonly\", \"readonly\");\n            self.attachmentLinkURL.css({\"display\": \"\"});\n            self.attachmentLinkURL.val(self.data.link);\n        } else if (v == 'custom') {\n            self.attachmentLinkURL.prop(\"readonly\", null);\n            self.attachmentLinkURL.css({\"display\": \"\"});\n            self.attachmentLinkURL.val(\"\");\n        }\n    });\n\n    this.insert = function() {\n        var data = {\n            \"action\": \"send-attachment-to-editor\",\n            \"attachment[id]\": self.data.id,\n            \"nonce\": window.parent.wp.media.view.settings.nonce.sendToEditor,\n            post_id: window.parent.wp.media.model.settings.post.id,\n            \"attachment[post_content]\": self.attachmentDescription.val(),\n            \"attachment[post_excerpt]\": self.attachmentCaption.val(),\n            \"attachment[image_alt]\": self.attachmentAlt.val(),\n            \"attachment[image-size]\": self.attachmentSize.val(),\n            \"attachment[align]\": self.attachmentAlign.val(),\n            \"attachment[url]\": self.attachmentLinkURL.val(),\n            \"html\": \"\"\n        };\n\n        $.post(ajaxurl, data, function(response){\n            console.log(response);\n            if (response.hasOwnProperty('data')) {\n                window.parent.send_to_editor(response.data);\n            }\n        });\n    };\n\n    this.attachmentLinkURL.css({\"display\": \"none\"});\n\n    uploader.attachmentContainer.empty();\n    uploader.attachmentContainer.append(this.info);\n};\n\n\nvar ilabMediaUploadItem = function($, uploader, file) {\n    var self = this;\n\n    this.cell = $(uploader.uploadItemTemplate());\n    this.background = this.cell.find('.ilab-upload-item-background');\n    this.status = this.cell.find('.ilab-upload-status');\n    this.progress = this.cell.find('.ilab-upload-progress');\n    this.progressTrack = this.cell.find('.ilab-upload-progress-track');\n\n    this.status.text('Waiting ...');\n    this.progressTrack.css({width: '0%'});\n    this.cell.css({'opacity': 0});\n    this.cell.addClass('no-mouse');\n    \n    this.state = 'waiting';\n    this.postId = null;\n\n    this.loader = this.cell.find('.ilab-loader-container');\n\n    if ((file.type.indexOf('image/')==0) && (file.size < (15 * 1024 * 1024))) {\n        this.background.css({opacity: 0.33, 'background-image': 'url('+URL.createObjectURL(file)+')'});\n    } else {\n        if (file.type.indexOf('image/')==0) {\n            this.cell.addClass('ilab-upload-cell-image');\n        } else if (file.type.indexOf('video/')==0) {\n            this.cell.addClass('ilab-upload-cell-video');\n        } else {\n            if (file.type == 'application/x-photoshop') {\n                this.cell.addClass('ilab-upload-cell-image');\n            } else {\n                this.cell.addClass('ilab-upload-cell-doc');\n            }\n        }\n    }\n\n    this.deselect = function() {\n        this.cell.removeClass('ilab-upload-selected');\n    };\n\n    this.startUpload = function() {\n        var data = {\n            \"action\": \"ilab_upload_prepare\",\n            \"filename\": file.name\n        };\n\n        $.post(ajaxurl, data, function(response){\n            console.log(response);\n            if (response.status == 'ready') {\n                self.status.text('Uploading ...');\n\n                var data = new FormData();\n                _.each(Object.keys(response.inputs), function(key){\n                    if (key != 'key') {\n                        data.append(key, response.inputs[key]);\n                    }\n                });\n\n                if (response.cacheControl != null) {\n                    data.append('Cache-Control', response.cacheControl);\n                }\n\n                if (response.expires != null) {\n                    data.append('Expires', response.expires);\n                }\n\n                var mimeType = file.type;\n                if (mimeType == 'application/x-photoshop') {\n                    mimeType = 'image/psd';\n                }\n\n                data.append('Content-Type', mimeType);\n                data.append('acl','public-read');\n                data.append('key',response.key);\n                data.append('file',file);\n\n\n                $.ajax({\n                    url: response.attr.action,\n                    method: 'POST',\n                    contentType: false,\n                    processData: false,\n                    data:data,\n                    xhr: function() {\n                        var xhr = $.ajaxSettings.xhr();\n                        xhr.upload.onprogress = function (e) {\n                            self.progressTrack.css({'width': (Math.floor(e.loaded / e.total * 100) + '%')});\n                        };\n                        return xhr;\n                    },\n                    success: function(successResponse) {\n                        var importData = {\n                            \"action\": \"ilab_upload_import_s3_file\",\n                            \"key\": response.key\n                        };\n\n                        $.post(ajaxurl, importData, function(importResponse){\n                            console.log(importResponse);\n                            if (importResponse.status == 'success') {\n                                self.progress.css({'display': 'none'});\n                                self.status.css({'display': 'none'});\n                                self.background.css({'opacity':''});\n\n                                self.state = 'ready';\n                                self.postId = importResponse.data.id;\n                                if (importResponse.data.thumb) {\n\n                                    self.loader.css({\"opacity\": 1});\n                                    var image = new Image();\n                                    image.onload=function() {\n                                        console.log('image loaded');\n                                        self.background.css({'background-image': 'url('+importResponse.data.thumb+')'});\n                                        self.loader.css({\"opacity\": 0});\n                                    };\n\n                                    image.src = importResponse.data.thumb;\n                                }\n\n                                self.cell.removeClass('no-mouse');\n                            } else {\n                                self.progress.css({'display': 'none'});\n                                self.status.text(\"Error.\");\n                                self.cell.addClass('upload-error');\n\n                            }\n\n                            uploader.uploadFinished(self);\n                        });\n\n\n                    },\n                    error: function(response) {\n                        self.progress.css({'display': 'none'});\n                        self.status.text('Error uploading.');\n\n                        uploader.uploadFinished(self);\n                    }\n                })\n            } else {\n                uploader.uploadFinished(self);\n                self.progress.css({'display': 'none'});\n\n                self.status.text('Error uploading.');\n            }\n        });\n    };\n\n\n\n    uploader.uploadTarget.append(this.cell);\n    setTimeout(function(){\n        self.cell.css({'opacity': ''});\n    }, 1000/30);\n\n    this.cell.on('click',function(e){\n        if (self.state == 'ready') {\n            if (uploader.settings.insertMode) {\n                self.cell.addClass('ilab-upload-selected');\n                uploader.uploadSelected(self);\n            } else {\n                var win = window.open('post.php?post='+self.postId+'&action=edit', '_blank');\n                win.focus();\n            }\n        }\n\n        e.preventDefault();\n        return false;\n    });\n\n};\n\nvar ilabMediaUploader = function($, settings) {\n    var self = this;\n\n    console.log(settings);\n    this.insertButton = $('#ilab-insert-button');\n    this.settings = settings;\n    this.uploadTarget = $('#ilab-video-upload-target');\n    this.attachmentContainer = $('#ilab-attachment-info');\n    this.uploadDirections = this.uploadTarget.find('.ilab-upload-directions');\n    this.uploadItemTemplate = wp.template('ilab-upload-cell');\n    this.attachmentTemplate = wp.template('ilab-attachment-info');\n    this.hiddenFileInput = $('<input type=\"file\" style=\"visibility:hidden\" multiple=\"multiple\">');\n\n    this.waitingQueue = [];\n    this.uploadingQueue = [];\n\n    this.watchToken = null;\n\n    this.currentSelection = null;\n    this.attachmentInfo = null;\n\n    this.watchQueue = function() {\n        if ((self.uploadingQueue.length < 5) && (self.waitingQueue.length>0)) {\n            var currentQ = 5 - self.uploadingQueue.length;\n            for(var i=0; i<currentQ; i++) {\n                if (self.waitingQueue.length > 0) {\n                    var up = self.waitingQueue.shift();\n\n                    self.uploadingQueue.push(up);\n                    up.startUpload();\n                }\n            }\n        }\n\n        self.watchToken = setTimeout(self.watchQueue, 500);\n    };\n\n    this.uploadSelected = function(upload) {\n        if (self.currentSelection == upload) {\n            return;\n        }\n\n        self.insertButton.prop('disabled', true);\n        if (self.currentSelection) {\n            self.currentSelection.deselect();\n        }\n\n        self.currentSelection = upload;\n\n        var data = {\n            \"action\": \"ilab_upload_attachment_info\",\n            \"postId\": upload.postId\n        };\n\n        $.post(ajaxurl, data, function(response){\n            console.log(response);\n            $('body').addClass('ilab-item-selected');\n            self.attachmentInfo = new ilabAttachmentInfo($, self, response);\n            self.insertButton.prop('disabled', false);\n        });\n    };\n\n    this.uploadFinished = function(upload) {\n        var idx = self.uploadingQueue.indexOf(upload);\n        if (idx > -1) {\n            self.uploadingQueue.splice(idx, 1);\n        }\n\n        clearTimeout(self.watchToken);\n        self.watchQueue();\n    };\n\n    this.addFile = function(file) {\n        console.log(file);\n\n        if (file.type=='') {\n            console.log('Missing file type.');\n            return false;\n        }\n\n        var mimeType = file.type;\n\n\n        if (mimeType == 'application/x-photoshop') {\n            mimeType = 'image/psd';\n        }\n\n        if (settings.allowedMimes.indexOf(mimeType) == -1) {\n            console.log('Mime-type '+mimeType+' not allowed.');\n            return false;\n        }\n\n        var mimeTypeParts = mimeType.split('/');\n        var type = mimeTypeParts[0];\n        var subType = mimeTypeParts[1];\n\n        if (type == 'image') {\n            if (!settings.imgixEnabled) {\n                console.log('Image files not allowed.');\n                return false;\n            }\n\n            if (['jpeg','gif','png'].indexOf(subType) == -1) {\n                if (!settings.extrasEnabled) {\n                    console.log('Non-standard image files not allowed.');\n                    return false;\n                }\n\n                if (['psd','tiff','bmp'].indexOf(subType) == -1) {\n                    console.log('Invalid subtype.');\n                    return false;\n                }\n            }\n        } else if (type == 'video') {\n            if (!settings.videoEnabled) {\n                console.log('Video not allowed.');\n                return false;\n            }\n        } else {\n            if (!settings.docsEnabled) {\n                console.log('Docs not allowed.');\n                return false;\n            }\n        }\n\n        console.log([\n            'accepted',\n            file\n        ]);\n\n        self.waitingQueue.push(new ilabMediaUploadItem($, self, file));\n    };\n\n    this.uploadTarget.on('dragenter dragover', function(e){\n        self.uploadTarget.addClass('drag-inside');\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    this.uploadTarget.on('dragleave drageexit', function(e){\n        self.uploadTarget.removeClass('drag-inside');\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    this.uploadTarget.on('drop', function(e){\n        self.uploadTarget.removeClass('drag-inside');\n        self.uploadDirections.css({display: 'none'});\n        e.preventDefault();\n        var files = e.originalEvent.dataTransfer.files;\n        _.each(files, self.addFile);\n    });\n\n    this.uploadTarget.on('click', function(e){\n        self.hiddenFileInput.click();\n    });\n\n    this.hiddenFileInput.on('change', function(e){\n        self.uploadDirections.css({display: 'none'});\n        for(var i=0; i<this.files.length; i++) {\n            self.addFile(this.files[i]);\n        }\n    });\n\n    $('#ilab-open-editor').on('click',function(e){\n        wp.media({frame:'select'}).open();\n\n        e.preventDefault();\n        return false;\n    });\n\n    this.insertButton.on('click', function(e){\n        if (self.attachmentInfo) {\n            self.attachmentInfo.insert();\n        }\n\n        e.preventDefault();\n        return false;\n    });\n\n    //window.parent.send_to_editor('cool');\n\n    //console.log(window.parent.jQuery('.media-modal-close').trigger('click'));\n\n    if (settings.insertMode) {\n        $('body').addClass('ilab-upload-insert-mode');\n        // $('body').addClass('ilab-item-selected');\n    }\n\n    this.watchToken = setTimeout(this.watchQueue, 500);\n};"],"sourceRoot":"js/"}